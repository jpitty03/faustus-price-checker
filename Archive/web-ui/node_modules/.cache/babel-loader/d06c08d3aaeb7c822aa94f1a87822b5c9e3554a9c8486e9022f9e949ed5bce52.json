{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridRowsLookupSelector, gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { useGridVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled, findRowsToSelect, findRowsToDeselect } from \"./utils.js\";\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) !== null && _getSelectionModelPro !== void 0 ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  var _props$rowSelectionPr, _props$rowSelectionPr2, _props$rowSelectionPr15, _props$rowSelectionPr16, _props$rowSelectionPr29, _props$rowSelectionPr30, _props$rowSelectionPr33;\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  }, [props.rowSelection]);\n  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (((_props$rowSelectionPr = props.rowSelectionPropagation) === null || _props$rowSelectionPr === void 0 ? void 0 : _props$rowSelectionPr.parents) || ((_props$rowSelectionPr2 = props.rowSelectionPropagation) === null || _props$rowSelectionPr2 === void 0 ? void 0 : _props$rowSelectionPr2.descendants));\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const tree = useGridSelector(apiRef, gridRowTreeSelector);\n  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) !== null && _lastRowToggled$curre !== void 0 ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(\"Setting selection model\");\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'footer' || (rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(\"Setting selection for row \".concat(id));\n      const newSelection = [];\n      const addRow = rowId => {\n        newSelection.push(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          var _props$rowSelectionPr3, _props$rowSelectionPr4, _props$rowSelectionPr5, _props$rowSelectionPr6;\n          findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr3 = (_props$rowSelectionPr4 = props.rowSelectionPropagation) === null || _props$rowSelectionPr4 === void 0 ? void 0 : _props$rowSelectionPr4.descendants) !== null && _props$rowSelectionPr3 !== void 0 ? _props$rowSelectionPr3 : false, (_props$rowSelectionPr5 = (_props$rowSelectionPr6 = props.rowSelectionPropagation) === null || _props$rowSelectionPr6 === void 0 ? void 0 : _props$rowSelectionPr6.parents) !== null && _props$rowSelectionPr5 !== void 0 ? _props$rowSelectionPr5 : false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelection);\n    } else {\n      logger.debug(\"Toggling selection for row \".concat(id));\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = new Set(selection);\n      newSelection.delete(id);\n      const addRow = rowId => {\n        newSelection.add(rowId);\n      };\n      const removeRow = rowId => {\n        newSelection.delete(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          var _props$rowSelectionPr7, _props$rowSelectionPr8, _props$rowSelectionPr9, _props$rowSelectionPr10;\n          findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr7 = (_props$rowSelectionPr8 = props.rowSelectionPropagation) === null || _props$rowSelectionPr8 === void 0 ? void 0 : _props$rowSelectionPr8.descendants) !== null && _props$rowSelectionPr7 !== void 0 ? _props$rowSelectionPr7 : false, (_props$rowSelectionPr9 = (_props$rowSelectionPr10 = props.rowSelectionPropagation) === null || _props$rowSelectionPr10 === void 0 ? void 0 : _props$rowSelectionPr10.parents) !== null && _props$rowSelectionPr9 !== void 0 ? _props$rowSelectionPr9 : false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        var _props$rowSelectionPr11, _props$rowSelectionPr12, _props$rowSelectionPr13, _props$rowSelectionPr14;\n        findRowsToDeselect(apiRef, tree, id, (_props$rowSelectionPr11 = (_props$rowSelectionPr12 = props.rowSelectionPropagation) === null || _props$rowSelectionPr12 === void 0 ? void 0 : _props$rowSelectionPr12.descendants) !== null && _props$rowSelectionPr11 !== void 0 ? _props$rowSelectionPr11 : false, (_props$rowSelectionPr13 = (_props$rowSelectionPr14 = props.rowSelectionPropagation) === null || _props$rowSelectionPr14 === void 0 ? void 0 : _props$rowSelectionPr14.parents) !== null && _props$rowSelectionPr13 !== void 0 ? _props$rowSelectionPr13 : false, removeRow);\n      }\n      const isSelectionValid = newSelection.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(Array.from(newSelection));\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, (_props$rowSelectionPr15 = props.rowSelectionPropagation) === null || _props$rowSelectionPr15 === void 0 ? void 0 : _props$rowSelectionPr15.descendants, (_props$rowSelectionPr16 = props.rowSelectionPropagation) === null || _props$rowSelectionPr16 === void 0 ? void 0 : _props$rowSelectionPr16.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(\"Setting selection for several rows\");\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      if (isSelected) {\n        newSelection = new Set(selectableIds);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            newSelection.add(rowId);\n          };\n          selectableIds.forEach(id => {\n            var _props$rowSelectionPr17, _props$rowSelectionPr18, _props$rowSelectionPr19, _props$rowSelectionPr20;\n            findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr17 = (_props$rowSelectionPr18 = props.rowSelectionPropagation) === null || _props$rowSelectionPr18 === void 0 ? void 0 : _props$rowSelectionPr18.descendants) !== null && _props$rowSelectionPr17 !== void 0 ? _props$rowSelectionPr17 : false, (_props$rowSelectionPr19 = (_props$rowSelectionPr20 = props.rowSelectionPropagation) === null || _props$rowSelectionPr20 === void 0 ? void 0 : _props$rowSelectionPr20.parents) !== null && _props$rowSelectionPr19 !== void 0 ? _props$rowSelectionPr19 : false, addRow);\n          });\n        }\n      } else {\n        newSelection = new Set();\n      }\n      const currentLookup = selectedIdsLookupSelector(apiRef);\n      if (newSelection.size === Object.keys(currentLookup).length && Array.from(newSelection).every(id => currentLookup[id] === id)) {\n        return;\n      }\n    } else {\n      newSelection = new Set(Object.values(selectedIdsLookupSelector(apiRef)));\n      const addRow = rowId => {\n        newSelection.add(rowId);\n      };\n      const removeRow = rowId => {\n        newSelection.delete(rowId);\n      };\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          newSelection.add(id);\n          if (applyAutoSelection) {\n            var _props$rowSelectionPr21, _props$rowSelectionPr22, _props$rowSelectionPr23, _props$rowSelectionPr24;\n            findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr21 = (_props$rowSelectionPr22 = props.rowSelectionPropagation) === null || _props$rowSelectionPr22 === void 0 ? void 0 : _props$rowSelectionPr22.descendants) !== null && _props$rowSelectionPr21 !== void 0 ? _props$rowSelectionPr21 : false, (_props$rowSelectionPr23 = (_props$rowSelectionPr24 = props.rowSelectionPropagation) === null || _props$rowSelectionPr24 === void 0 ? void 0 : _props$rowSelectionPr24.parents) !== null && _props$rowSelectionPr23 !== void 0 ? _props$rowSelectionPr23 : false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            var _props$rowSelectionPr25, _props$rowSelectionPr26, _props$rowSelectionPr27, _props$rowSelectionPr28;\n            findRowsToDeselect(apiRef, tree, id, (_props$rowSelectionPr25 = (_props$rowSelectionPr26 = props.rowSelectionPropagation) === null || _props$rowSelectionPr26 === void 0 ? void 0 : _props$rowSelectionPr26.descendants) !== null && _props$rowSelectionPr25 !== void 0 ? _props$rowSelectionPr25 : false, (_props$rowSelectionPr27 = (_props$rowSelectionPr28 = props.rowSelectionPropagation) === null || _props$rowSelectionPr28 === void 0 ? void 0 : _props$rowSelectionPr28.parents) !== null && _props$rowSelectionPr27 !== void 0 ? _props$rowSelectionPr27 : false, removeRow);\n          }\n        }\n      });\n    }\n    const isSelectionValid = newSelection.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(Array.from(newSelection));\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, (_props$rowSelectionPr29 = props.rowSelectionPropagation) === null || _props$rowSelectionPr29 === void 0 ? void 0 : _props$rowSelectionPr29.descendants, (_props$rowSelectionPr30 = props.rowSelectionPropagation) === null || _props$rowSelectionPr30 === void 0 ? void 0 : _props$rowSelectionPr30.parents]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(\"Expanding selection from row \".concat(startId, \" to row \").concat(endId));\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(function () {\n    var _props$rowSelectionPr32;\n    let sortModelUpdated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return filteredRowsLookup[id] !== true;\n    };\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      var _props$rowSelectionPr31;\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          return;\n        }\n        delete selectionLookup[id];\n        hasChanged = true;\n        return;\n      }\n      if (!((_props$rowSelectionPr31 = props.rowSelectionPropagation) !== null && _props$rowSelectionPr31 !== void 0 && _props$rowSelectionPr31.parents)) {\n        return;\n      }\n      const node = tree[id];\n      if (node.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          delete selectionLookup[id];\n          hasChanged = true;\n          return;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          delete selectionLookup[id];\n          hasChanged = true;\n        }\n      }\n    });\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && ((_props$rowSelectionPr32 = props.rowSelectionPropagation) === null || _props$rowSelectionPr32 === void 0 ? void 0 : _props$rowSelectionPr32.parents) && Object.keys(selectionLookup).length > 0;\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      const newSelection = Object.values(selectionLookup);\n      if (shouldReapplyPropagation) {\n        apiRef.current.selectRows(newSelection, true, true);\n      } else {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isNestedData, (_props$rowSelectionPr33 = props.rowSelectionPropagation) === null || _props$rowSelectionPr33 === void 0 ? void 0 : _props$rowSelectionPr33.parents, props.keepNonExistentRowsSelected, props.filterMode, tree]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _event$target$closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_event$target$closest = event.target.closest(\".\".concat(gridClasses.cell))) === null || _event$target$closest === void 0 ? void 0 : _event$target$closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if ((column === null || column === void 0 ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 || _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination, props.paginationMode]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n};","map":{"version":3,"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","useGridSelector","gridRowsLookupSelector","gridRowMaximumTreeDepthSelector","gridRowTreeSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","gridFilteredRowsLookupSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","isEventTargetInPortal","isMultipleRowSelectionEnabled","findRowsToSelect","findRowsToDeselect","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","_getSelectionModelPro","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","_props$rowSelectionPr","_props$rowSelectionPr2","_props$rowSelectionPr15","_props$rowSelectionPr16","_props$rowSelectionPr29","_props$rowSelectionPr30","_props$rowSelectionPr33","logger","runIfRowSelectionIsEnabled","useCallback","callback","arguments","applyAutoSelection","signature","DataGrid","rowSelectionPropagation","parents","descendants","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","tree","isNestedData","expandMouseRowRangeSelection","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","undefined","resetSelection","concat","newSelection","addRow","push","_props$rowSelectionPr3","_props$rowSelectionPr4","_props$rowSelectionPr5","_props$rowSelectionPr6","selection","Set","delete","add","removeRow","_props$rowSelectionPr7","_props$rowSelectionPr8","_props$rowSelectionPr9","_props$rowSelectionPr10","_props$rowSelectionPr11","_props$rowSelectionPr12","_props$rowSelectionPr13","_props$rowSelectionPr14","isSelectionValid","size","from","selectRows","ids","selectableIds","filter","forEach","_props$rowSelectionPr17","_props$rowSelectionPr18","_props$rowSelectionPr19","_props$rowSelectionPr20","currentLookup","Object","keys","every","values","_props$rowSelectionPr21","_props$rowSelectionPr22","_props$rowSelectionPr23","_props$rowSelectionPr24","_props$rowSelectionPr25","_props$rowSelectionPr26","_props$rowSelectionPr27","_props$rowSelectionPr28","_ref","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","_props$rowSelectionPr32","sortModelUpdated","currentSelection","rowsLookup","filteredRowsLookup","selectionLookup","isNonExistent","filterMode","hasChanged","_props$rowSelectionPr31","keepNonExistentRowsSelected","node","isAutoGenerated","children","childId","shouldReapplyPropagation","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_event$target$closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","rowsToBeSelected","pagination","checkboxSelectionVisibleOnly","paginationMode","handleCellKeyDown","getCellMode","Edit","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","String","fromCharCode","keyCode","getAllRowIds","useEffect","isStateControlled"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridRowsLookupSelector, gridRowMaximumTreeDepthSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { useGridVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled, findRowsToSelect, findRowsToDeselect } from \"./utils.js\";\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? getSelectionModelPropValue(props.rowSelectionModel) ?? [] : []\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  }, [props.rowSelection]);\n  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants);\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const tree = useGridSelector(apiRef, gridRowTreeSelector);\n  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      const newSelection = [];\n      const addRow = rowId => {\n        newSelection.push(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelection);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = new Set(selection);\n      newSelection.delete(id);\n      const addRow = rowId => {\n        newSelection.add(rowId);\n      };\n      const removeRow = rowId => {\n        newSelection.delete(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n      }\n      const isSelectionValid = newSelection.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(Array.from(newSelection));\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      if (isSelected) {\n        newSelection = new Set(selectableIds);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            newSelection.add(rowId);\n          };\n          selectableIds.forEach(id => {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          });\n        }\n      } else {\n        newSelection = new Set();\n      }\n      const currentLookup = selectedIdsLookupSelector(apiRef);\n      if (newSelection.size === Object.keys(currentLookup).length && Array.from(newSelection).every(id => currentLookup[id] === id)) {\n        return;\n      }\n    } else {\n      newSelection = new Set(Object.values(selectedIdsLookupSelector(apiRef)));\n      const addRow = rowId => {\n        newSelection.add(rowId);\n      };\n      const removeRow = rowId => {\n        newSelection.delete(rowId);\n      };\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          newSelection.add(id);\n          if (applyAutoSelection) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n          }\n        }\n      });\n    }\n    const isSelectionValid = newSelection.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(Array.from(newSelection));\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback((sortModelUpdated = false) => {\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return filteredRowsLookup[id] !== true;\n    };\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          return;\n        }\n        delete selectionLookup[id];\n        hasChanged = true;\n        return;\n      }\n      if (!props.rowSelectionPropagation?.parents) {\n        return;\n      }\n      const node = tree[id];\n      if (node.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          delete selectionLookup[id];\n          hasChanged = true;\n          return;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          delete selectionLookup[id];\n          hasChanged = true;\n        }\n      }\n    });\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && Object.keys(selectionLookup).length > 0;\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      const newSelection = Object.values(selectionLookup);\n      if (shouldReapplyPropagation) {\n        apiRef.current.selectRows(newSelection, true, true);\n      } else {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isNestedData, props.rowSelectionPropagation?.parents, props.keepNonExistentRowsSelected, props.filterMode, tree]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination, props.paginationMode]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  useGridApiEventHandler(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}