{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpitt\\\\VSCode\\\\faustus-price-checker\\\\web-ui\\\\src\\\\components\\\\ColDefs.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// priceGridColumns.js\n\nexport const getColumns = currencyIconMap => [{\n  field: \"haveCurrency\",\n  headerName: \"Have Currency\",\n  width: 200,\n  renderCell: params => {\n    var _currencyIconMap$curr;\n    const currencyName = params.value;\n    const amount = params.row.haveAmount;\n    const iconUrl = (_currencyIconMap$curr = currencyIconMap[currencyName]) === null || _currencyIconMap$curr === void 0 ? void 0 : _currencyIconMap$curr.icon;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: 8\n        },\n        children: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, this), iconUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: iconUrl,\n        alt: currencyName,\n        style: {\n          width: 24,\n          height: 24,\n          marginRight: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: currencyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }, this);\n  }\n},\n// {\n//     field: \"haveAmount\",\n//     headerName: \"Have Amt\",\n//     type: \"number\",\n//     width: 100\n// },\n{\n  field: \"wantCurrency\",\n  headerName: \"Want Currency\",\n  width: 200,\n  renderCell: params => {\n    var _currencyIconMap$curr2;\n    const currencyName = params.value;\n    const amount = params.row.wantAmount;\n    const iconUrl = (_currencyIconMap$curr2 = currencyIconMap[currencyName]) === null || _currencyIconMap$curr2 === void 0 ? void 0 : _currencyIconMap$curr2.icon;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: 8\n        },\n        children: amount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), iconUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: iconUrl,\n        alt: currencyName,\n        style: {\n          width: 24,\n          height: 24,\n          marginRight: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: currencyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this);\n  }\n}, {\n  field: \"stock\",\n  headerName: \"Stock\",\n  type: \"number\",\n  width: 100\n},\n// {\n//     field: \"wantAmount\",\n//     headerName: \"Want Amt\",\n//     type: \"number\",\n//     width: 100\n// },\n{\n  field: \"rowType\",\n  headerName: \"Type\",\n  width: 100\n}, {\n  field: \"ninjaPrice\",\n  headerName: \"Ninja Price\",\n  type: \"number\",\n  width: 150,\n  // Adjusted width to fit additional content\n  renderCell: params => {\n    var _currencyIconMap$curr3, _currencyIconMap$curr4;\n    const currencyName = params.row.wantCurrency; // Access the 'haveCurrency' field\n    const chaosEquivalent = ((_currencyIconMap$curr3 = currencyIconMap[currencyName]) === null || _currencyIconMap$curr3 === void 0 ? void 0 : _currencyIconMap$curr3.chaosEquivalent) || \"N/A\"; // Get chaosEquivalent or fallback\n    const iconUrl = (_currencyIconMap$curr4 = currencyIconMap[currencyName]) === null || _currencyIconMap$curr4 === void 0 ? void 0 : _currencyIconMap$curr4.icon; // Get the icon URL\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [iconUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: iconUrl,\n        alt: currencyName,\n        style: {\n          width: 24,\n          height: 24,\n          marginRight: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: chaosEquivalent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this);\n  }\n}, {\n  field: \"lastUpdated\",\n  headerName: \"Last Updated\",\n  width: 180,\n  renderCell: params => {\n    const date = new Date(params.value);\n    return date.toLocaleDateString('en-US', {\n      year: '2-digit',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n}];\nexport default function buildCurrencyMap(ninjaData) {\n  // ninjaData looks like:\n  // {\n  //   \"lines\": [\n  //     { \"currencyTypeName\": \"Divine Orb\", \"chaosEquivalent\": 170.05, ... },\n  //     ...\n  //   ],\n  //   \"currencyDetails\": [\n  //     { \"id\": 3, \"icon\": \"...\", \"name\": \"Divine Orb\", \"tradeId\": \"divine\" },\n  //     ...\n  //   ]\n  // }\n\n  const linesMap = {}; // For quick lookup of chaosEquivalent (and more) by currency name\n\n  // 1) Build a map from \"Divine Orb\" => { chaosEquivalent, lines data, etc. }\n  if (ninjaData.lines) {\n    ninjaData.lines.forEach(line => {\n      const name = line.currencyTypeName; // e.g. \"Divine Orb\"\n      linesMap[name] = {\n        chaosEquivalent: line.chaosEquivalent\n        // You could store other fields like pay/receive if desired\n        // pay: line.pay,\n        // receive: line.receive\n      };\n    });\n  }\n\n  // 2) Now merge with \"currencyDetails\"\n  const mergedMap = {};\n  if (ninjaData.currencyDetails) {\n    ninjaData.currencyDetails.forEach(c => {\n      const name = c.name; // e.g. \"Divine Orb\"\n      const icon = c.icon;\n      const lineObj = linesMap[name] || {};\n\n      // mergedMap[\"Divine Orb\"] = { icon, chaosEquivalent, ... }\n      mergedMap[name] = {\n        icon,\n        chaosEquivalent: lineObj.chaosEquivalent || 0,\n        // fallback if not found\n        tradeId: c.tradeId\n        // ... any other fields you want\n      };\n    });\n  }\n  return mergedMap;\n}","map":{"version":3,"names":["getColumns","currencyIconMap","field","headerName","width","renderCell","params","_currencyIconMap$curr","currencyName","value","amount","row","haveAmount","iconUrl","icon","_jsxDEV","style","display","alignItems","children","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","height","_currencyIconMap$curr2","wantAmount","type","_currencyIconMap$curr3","_currencyIconMap$curr4","wantCurrency","chaosEquivalent","date","Date","toLocaleDateString","year","month","day","hour","minute","second","buildCurrencyMap","ninjaData","linesMap","lines","forEach","line","name","currencyTypeName","mergedMap","currencyDetails","c","lineObj","tradeId"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/ColDefs.js"],"sourcesContent":["// priceGridColumns.js\r\n\r\nexport const getColumns = (currencyIconMap) => [\r\n    {\r\n        field: \"haveCurrency\",\r\n        headerName: \"Have Currency\",\r\n        width: 200,\r\n        renderCell: (params) => {\r\n            const currencyName = params.value;\r\n            const amount = params.row.haveAmount;\r\n            const iconUrl = currencyIconMap[currencyName]?.icon;\r\n            return (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span style={{ marginRight: 8 }}>{amount}</span>\r\n                    {iconUrl && (\r\n                        <img\r\n                            src={iconUrl}\r\n                            alt={currencyName}\r\n                            style={{ width: 24, height: 24, marginRight: 8 }}\r\n                        />\r\n                    )}\r\n                    <span>{currencyName}</span>\r\n                </div>\r\n            );\r\n        },\r\n    },\r\n    // {\r\n    //     field: \"haveAmount\",\r\n    //     headerName: \"Have Amt\",\r\n    //     type: \"number\",\r\n    //     width: 100\r\n    // },\r\n    {\r\n        field: \"wantCurrency\",\r\n        headerName: \"Want Currency\",\r\n        width: 200,\r\n        renderCell: (params) => {\r\n            const currencyName = params.value;\r\n            const amount = params.row.wantAmount;\r\n            const iconUrl = currencyIconMap[currencyName]?.icon;\r\n            return (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span style={{ marginRight: 8 }}>{amount}</span>\r\n                    {iconUrl && (\r\n                        <img\r\n                            src={iconUrl}\r\n                            alt={currencyName}\r\n                            style={{ width: 24, height: 24, marginRight: 8 }}\r\n                        />\r\n                    )}\r\n                    <span>{currencyName}</span>\r\n                </div>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        field: \"stock\",\r\n        headerName: \"Stock\",\r\n        type: \"number\",\r\n        width: 100\r\n    },\r\n    // {\r\n    //     field: \"wantAmount\",\r\n    //     headerName: \"Want Amt\",\r\n    //     type: \"number\",\r\n    //     width: 100\r\n    // },\r\n    {\r\n        field: \"rowType\",\r\n        headerName: \"Type\",\r\n        width: 100\r\n    },\r\n    {\r\n        field: \"ninjaPrice\",\r\n        headerName: \"Ninja Price\",\r\n        type: \"number\",\r\n        width: 150, // Adjusted width to fit additional content\r\n        renderCell: (params) => {\r\n            const currencyName = params.row.wantCurrency; // Access the 'haveCurrency' field\r\n            const chaosEquivalent = currencyIconMap[currencyName]?.chaosEquivalent || \"N/A\"; // Get chaosEquivalent or fallback\r\n            const iconUrl = currencyIconMap[currencyName]?.icon; // Get the icon URL\r\n\r\n            return (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    {iconUrl && (\r\n                        <img\r\n                            src={iconUrl}\r\n                            alt={currencyName}\r\n                            style={{ width: 24, height: 24, marginRight: 8 }}\r\n                        />\r\n                    )}\r\n                    <span>{chaosEquivalent}</span>\r\n                </div>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        field: \"lastUpdated\",\r\n        headerName: \"Last Updated\",\r\n        width: 180,\r\n        renderCell: (params) => {\r\n            const date = new Date(params.value);\r\n            return date.toLocaleDateString('en-US', {\r\n                year: '2-digit',\r\n                month: '2-digit',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit'\r\n            });\r\n        }\r\n    }\r\n];\r\n\r\nexport default function buildCurrencyMap(ninjaData) {\r\n    // ninjaData looks like:\r\n    // {\r\n    //   \"lines\": [\r\n    //     { \"currencyTypeName\": \"Divine Orb\", \"chaosEquivalent\": 170.05, ... },\r\n    //     ...\r\n    //   ],\r\n    //   \"currencyDetails\": [\r\n    //     { \"id\": 3, \"icon\": \"...\", \"name\": \"Divine Orb\", \"tradeId\": \"divine\" },\r\n    //     ...\r\n    //   ]\r\n    // }\r\n\r\n    const linesMap = {};  // For quick lookup of chaosEquivalent (and more) by currency name\r\n\r\n    // 1) Build a map from \"Divine Orb\" => { chaosEquivalent, lines data, etc. }\r\n    if (ninjaData.lines) {\r\n        ninjaData.lines.forEach((line) => {\r\n            const name = line.currencyTypeName; // e.g. \"Divine Orb\"\r\n            linesMap[name] = {\r\n                chaosEquivalent: line.chaosEquivalent,\r\n                // You could store other fields like pay/receive if desired\r\n                // pay: line.pay,\r\n                // receive: line.receive\r\n            };\r\n        });\r\n    }\r\n\r\n    // 2) Now merge with \"currencyDetails\"\r\n    const mergedMap = {};\r\n\r\n    if (ninjaData.currencyDetails) {\r\n        ninjaData.currencyDetails.forEach((c) => {\r\n            const name = c.name; // e.g. \"Divine Orb\"\r\n            const icon = c.icon;\r\n            const lineObj = linesMap[name] || {};\r\n\r\n            // mergedMap[\"Divine Orb\"] = { icon, chaosEquivalent, ... }\r\n            mergedMap[name] = {\r\n                icon,\r\n                chaosEquivalent: lineObj.chaosEquivalent || 0, // fallback if not found\r\n                tradeId: c.tradeId,\r\n                // ... any other fields you want\r\n            };\r\n        });\r\n    }\r\n\r\n    return mergedMap;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}