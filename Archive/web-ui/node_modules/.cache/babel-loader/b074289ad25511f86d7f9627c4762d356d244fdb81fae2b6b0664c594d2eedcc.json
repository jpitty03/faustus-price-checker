{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport MenuList from '@mui/material/MenuList';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { gridDensitySelector } from \"../../hooks/features/density/densitySelector.js\";\nimport { isHideMenuKey } from \"../../utils/keyboardUtils.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridSelector } from \"../../hooks/utils/useGridSelector.js\";\nimport { GridMenu } from \"../menu/GridMenu.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { gridClasses } from \"../../constants/gridClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridToolbarDensitySelector = forwardRef(function GridToolbarDensitySelector(props, ref) {\n  var _rootProps$slotProps, _rootProps$slotProps2;\n  const {\n    slotProps = {}\n  } = props;\n  const buttonProps = slotProps.button || {};\n  const tooltipProps = slotProps.tooltip || {};\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const density = useGridSelector(apiRef, gridDensitySelector);\n  const densityButtonId = useId();\n  const densityMenuId = useId();\n  const [open, setOpen] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(ref, buttonRef);\n  const densityOptions = [{\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityCompact'),\n    value: 'compact'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityStandard'),\n    value: 'standard'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityComfortable'),\n    value: 'comfortable'\n  }];\n  const startIcon = React.useMemo(() => {\n    switch (density) {\n      case 'compact':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {});\n      case 'comfortable':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {});\n      default:\n        return /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {});\n    }\n  }, [density, rootProps]);\n  const handleDensitySelectorOpen = event => {\n    var _buttonProps$onClick;\n    setOpen(prevOpen => !prevOpen);\n    (_buttonProps$onClick = buttonProps.onClick) === null || _buttonProps$onClick === void 0 || _buttonProps$onClick.call(buttonProps, event);\n  };\n  const handleDensitySelectorClose = () => {\n    setOpen(false);\n  };\n  const handleDensityUpdate = newDensity => {\n    apiRef.current.setDensity(newDensity);\n    setOpen(false);\n  };\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n    }\n    if (isHideMenuKey(event.key)) {\n      setOpen(false);\n    }\n  };\n\n  // Disable the button if the corresponding is disabled\n  if (rootProps.disableDensitySelector) {\n    return null;\n  }\n  const densityElements = densityOptions.map((option, index) => /*#__PURE__*/_jsxs(MenuItem, {\n    onClick: () => handleDensityUpdate(option.value),\n    selected: option.value === density,\n    children: [/*#__PURE__*/_jsx(ListItemIcon, {\n      children: option.icon\n    }), option.label]\n  }, index));\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n      title: apiRef.current.getLocaleText('toolbarDensityLabel'),\n      enterDelay: 1000\n    }, (_rootProps$slotProps = rootProps.slotProps) === null || _rootProps$slotProps === void 0 ? void 0 : _rootProps$slotProps.baseTooltip, tooltipProps, {\n      children: /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        size: \"small\",\n        startIcon: startIcon,\n        \"aria-label\": apiRef.current.getLocaleText('toolbarDensityLabel'),\n        \"aria-haspopup\": \"menu\",\n        \"aria-expanded\": open,\n        \"aria-controls\": open ? densityMenuId : undefined,\n        id: densityButtonId,\n        onClick: handleDensitySelectorOpen\n      }, (_rootProps$slotProps2 = rootProps.slotProps) === null || _rootProps$slotProps2 === void 0 ? void 0 : _rootProps$slotProps2.baseButton, buttonProps, {\n        ref: handleRef,\n        children: apiRef.current.getLocaleText('toolbarDensity')\n      }))\n    })), /*#__PURE__*/_jsx(GridMenu, {\n      open: open,\n      target: buttonRef.current,\n      onClose: handleDensitySelectorClose,\n      position: \"bottom-start\",\n      children: /*#__PURE__*/_jsx(MenuList, {\n        id: densityMenuId,\n        className: gridClasses.menuList,\n        \"aria-labelledby\": densityButtonId,\n        onKeyDown: handleListKeyDown,\n        autoFocusItem: open,\n        children: densityElements\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarDensitySelector.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.object\n} : void 0;\nexport { GridToolbarDensitySelector };","map":{"version":3,"names":["_extends","React","PropTypes","unstable_useId","useId","unstable_useForkRef","useForkRef","MenuList","MenuItem","ListItemIcon","forwardRef","gridDensitySelector","isHideMenuKey","useGridApiContext","useGridSelector","GridMenu","useGridRootProps","gridClasses","jsx","_jsx","jsxs","_jsxs","GridToolbarDensitySelector","props","ref","_rootProps$slotProps","_rootProps$slotProps2","slotProps","buttonProps","button","tooltipProps","tooltip","apiRef","rootProps","density","densityButtonId","densityMenuId","open","setOpen","useState","buttonRef","useRef","handleRef","densityOptions","icon","slots","densityCompactIcon","label","current","getLocaleText","value","densityStandardIcon","densityComfortableIcon","startIcon","useMemo","handleDensitySelectorOpen","event","_buttonProps$onClick","prevOpen","onClick","call","handleDensitySelectorClose","handleDensityUpdate","newDensity","setDensity","handleListKeyDown","key","preventDefault","disableDensitySelector","densityElements","map","option","index","selected","children","Fragment","baseTooltip","title","enterDelay","baseButton","size","undefined","id","target","onClose","position","className","menuList","onKeyDown","autoFocusItem","process","env","NODE_ENV","propTypes","object"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarDensitySelector.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport MenuList from '@mui/material/MenuList';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { gridDensitySelector } from \"../../hooks/features/density/densitySelector.js\";\nimport { isHideMenuKey } from \"../../utils/keyboardUtils.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { useGridSelector } from \"../../hooks/utils/useGridSelector.js\";\nimport { GridMenu } from \"../menu/GridMenu.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { gridClasses } from \"../../constants/gridClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridToolbarDensitySelector = forwardRef(function GridToolbarDensitySelector(props, ref) {\n  const {\n    slotProps = {}\n  } = props;\n  const buttonProps = slotProps.button || {};\n  const tooltipProps = slotProps.tooltip || {};\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const density = useGridSelector(apiRef, gridDensitySelector);\n  const densityButtonId = useId();\n  const densityMenuId = useId();\n  const [open, setOpen] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(ref, buttonRef);\n  const densityOptions = [{\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityCompact'),\n    value: 'compact'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityStandard'),\n    value: 'standard'\n  }, {\n    icon: /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityComfortable'),\n    value: 'comfortable'\n  }];\n  const startIcon = React.useMemo(() => {\n    switch (density) {\n      case 'compact':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityCompactIcon, {});\n      case 'comfortable':\n        return /*#__PURE__*/_jsx(rootProps.slots.densityComfortableIcon, {});\n      default:\n        return /*#__PURE__*/_jsx(rootProps.slots.densityStandardIcon, {});\n    }\n  }, [density, rootProps]);\n  const handleDensitySelectorOpen = event => {\n    setOpen(prevOpen => !prevOpen);\n    buttonProps.onClick?.(event);\n  };\n  const handleDensitySelectorClose = () => {\n    setOpen(false);\n  };\n  const handleDensityUpdate = newDensity => {\n    apiRef.current.setDensity(newDensity);\n    setOpen(false);\n  };\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n    }\n    if (isHideMenuKey(event.key)) {\n      setOpen(false);\n    }\n  };\n\n  // Disable the button if the corresponding is disabled\n  if (rootProps.disableDensitySelector) {\n    return null;\n  }\n  const densityElements = densityOptions.map((option, index) => /*#__PURE__*/_jsxs(MenuItem, {\n    onClick: () => handleDensityUpdate(option.value),\n    selected: option.value === density,\n    children: [/*#__PURE__*/_jsx(ListItemIcon, {\n      children: option.icon\n    }), option.label]\n  }, index));\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(rootProps.slots.baseTooltip, _extends({\n      title: apiRef.current.getLocaleText('toolbarDensityLabel'),\n      enterDelay: 1000\n    }, rootProps.slotProps?.baseTooltip, tooltipProps, {\n      children: /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        size: \"small\",\n        startIcon: startIcon,\n        \"aria-label\": apiRef.current.getLocaleText('toolbarDensityLabel'),\n        \"aria-haspopup\": \"menu\",\n        \"aria-expanded\": open,\n        \"aria-controls\": open ? densityMenuId : undefined,\n        id: densityButtonId,\n        onClick: handleDensitySelectorOpen\n      }, rootProps.slotProps?.baseButton, buttonProps, {\n        ref: handleRef,\n        children: apiRef.current.getLocaleText('toolbarDensity')\n      }))\n    })), /*#__PURE__*/_jsx(GridMenu, {\n      open: open,\n      target: buttonRef.current,\n      onClose: handleDensitySelectorClose,\n      position: \"bottom-start\",\n      children: /*#__PURE__*/_jsx(MenuList, {\n        id: densityMenuId,\n        className: gridClasses.menuList,\n        \"aria-labelledby\": densityButtonId,\n        onKeyDown: handleListKeyDown,\n        autoFocusItem: open,\n        children: densityElements\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarDensitySelector.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.object\n} : void 0;\nexport { GridToolbarDensitySelector };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}