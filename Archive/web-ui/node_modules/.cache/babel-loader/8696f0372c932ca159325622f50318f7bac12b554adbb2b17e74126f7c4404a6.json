{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpitt\\\\VSCode\\\\faustus-price-checker\\\\web-ui\\\\src\\\\components\\\\PriceDataGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { getColumns } from \"./ColDefs\";\nimport { buildCurrencyMap } from \"./ColDefs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction flattenExchanges(pricesJson) {\n  if (!pricesJson || !pricesJson.exchanges) {\n    console.error(\"Invalid data structure received:\", pricesJson);\n    return [];\n  }\n  let rowId = 1;\n  const rows = [];\n  pricesJson.exchanges.forEach(exchange => {\n    const {\n      haveCurrency,\n      wantCurrency,\n      lastUpdated,\n      offers,\n      competingTrades\n    } = exchange;\n\n    // If there's at least one offer, push the first\n    if (offers && offers.length > 0) {\n      const firstOffer = offers[0];\n      rows.push({\n        id: rowId++,\n        rowType: \"offer\",\n        haveCurrency: haveCurrency,\n        wantCurrency,\n        lastUpdated,\n        haveAmount: firstOffer.wantAmount,\n        wantAmount: firstOffer.haveAmount,\n        stock: firstOffer.stock\n      });\n    }\n\n    // If there's at least one competing, push the first\n    if (competingTrades && competingTrades.length > 0) {\n      const firstCompeting = competingTrades[0];\n      rows.push({\n        id: rowId++,\n        rowType: \"competing\",\n        haveCurrency,\n        wantCurrency,\n        lastUpdated,\n        haveAmount: firstCompeting.wantAmount,\n        wantAmount: firstCompeting.haveAmount,\n        stock: firstCompeting.stock\n      });\n    }\n  });\n  return rows;\n}\nexport default function PriceDataGrid() {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\n  const [loading, setLoading] = useState(true);\n  const columns = getColumns(currencyIconMap);\n  useEffect(() => {\n    fetch(\"/currencyOverview.json\").then(res => res.json()).then(ninjaData => {\n      // Merge lines + currencyDetails\n      const merged = buildCurrencyMap(ninjaData);\n      // e.g. store in state\n      setCurrencyMap(merged);\n\n      // Then fetch prices if needed...\n      return fetch(\"/faustusPrices.json\");\n    }).then(res => res.json()).then(pricesData => {\n      // Flatten 'exchanges' -> rows\n      const rows = flattenExchanges(pricesData);\n      setRows(rows);\n      setLoading(false);\n    }).catch(err => console.error(err));\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 800,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10,\n      rowsPerPageOptions: [5, 10, 25]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(PriceDataGrid, \"zvqA+PDE3ZqKN4nXsPjSqjFJM+s=\");\n_c = PriceDataGrid;\nvar _c;\n$RefreshReg$(_c, \"PriceDataGrid\");","map":{"version":3,"names":["React","useEffect","useState","DataGrid","getColumns","buildCurrencyMap","jsxDEV","_jsxDEV","flattenExchanges","pricesJson","exchanges","console","error","rowId","rows","forEach","exchange","haveCurrency","wantCurrency","lastUpdated","offers","competingTrades","length","firstOffer","push","id","rowType","haveAmount","wantAmount","stock","firstCompeting","PriceDataGrid","_s","setRows","currencyIconMap","setCurrencyIconMap","loading","setLoading","columns","fetch","then","res","json","ninjaData","merged","setCurrencyMap","pricesData","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","pageSize","rowsPerPageOptions","_c","$RefreshReg$"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/PriceDataGrid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { getColumns } from \"./ColDefs\";\r\nimport { buildCurrencyMap } from \"./ColDefs\";\r\n\r\n\r\nfunction flattenExchanges(pricesJson) {\r\n  if (!pricesJson || !pricesJson.exchanges) {\r\n    console.error(\"Invalid data structure received:\", pricesJson);\r\n    return [];\r\n  }\r\n\r\n  let rowId = 1;\r\n  const rows = [];\r\n\r\n  pricesJson.exchanges.forEach((exchange) => {\r\n    const { haveCurrency, wantCurrency, lastUpdated, offers, competingTrades } = exchange;\r\n\r\n    // If there's at least one offer, push the first\r\n    if (offers && offers.length > 0) {\r\n      const firstOffer = offers[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"offer\",\r\n        haveCurrency: haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstOffer.wantAmount,\r\n        wantAmount: firstOffer.haveAmount,\r\n        stock: firstOffer.stock\r\n      });\r\n    }\r\n\r\n    // If there's at least one competing, push the first\r\n    if (competingTrades && competingTrades.length > 0) {\r\n      const firstCompeting = competingTrades[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"competing\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstCompeting.wantAmount,\r\n        wantAmount: firstCompeting.haveAmount,\r\n        stock: firstCompeting.stock\r\n      });\r\n    }\r\n  });\r\n\r\n  return rows;\r\n}\r\n\r\nexport default function PriceDataGrid() {\r\n  const [rows, setRows] = useState([]);\r\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const columns = getColumns(currencyIconMap);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/currencyOverview.json\")\r\n      .then((res) => res.json())\r\n      .then((ninjaData) => {\r\n        // Merge lines + currencyDetails\r\n        const merged = buildCurrencyMap(ninjaData);\r\n        // e.g. store in state\r\n        setCurrencyMap(merged);\r\n  \r\n        // Then fetch prices if needed...\r\n        return fetch(\"/faustusPrices.json\");\r\n      })\r\n      .then((res) => res.json())\r\n      .then((pricesData) => {\r\n        // Flatten 'exchanges' -> rows\r\n        const rows = flattenExchanges(pricesData);\r\n        setRows(rows);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => console.error(err));\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: 800, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}