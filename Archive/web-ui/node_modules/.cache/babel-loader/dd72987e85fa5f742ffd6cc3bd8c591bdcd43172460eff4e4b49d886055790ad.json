{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{DataGrid}from\"@mui/x-data-grid\";import{getColumns}from\"./ColDefs\";// Helper: Build Currency Map\nimport{jsx as _jsx}from\"react/jsx-runtime\";function buildCurrencyMap(ninjaData){const linesMap={};// Map for chaosEquivalent data\n// Build a map from \"lines\"\nif(ninjaData&&ninjaData.lines){ninjaData.lines.forEach(line=>{const name=line.currencyTypeName;linesMap[name]={chaosEquivalent:line.chaosEquivalent||0,pay:line.pay,receive:line.receive};});}const mergedMap={};// Merge with currencyDetails\nif(ninjaData&&ninjaData.currencyDetails){ninjaData.currencyDetails.forEach(c=>{const name=c.name;const icon=c.icon;const lineObj=linesMap[name]||{};mergedMap[name]={icon,chaosEquivalent:lineObj.chaosEquivalent||0,tradeId:c.tradeId};});}return mergedMap;}// // Helper: Define Columns\n// function getColumns(currencyIconMap) {\n//   return [\n//     {\n//       field: \"haveCurrency\",\n//       headerName: \"Have Currency\",\n//       width: 250,\n//       renderCell: (params) => {\n//         const currencyName = params.value;\n//         const amount = params.row.haveAmount;\n//         const iconUrl = currencyIconMap[currencyName]?.icon;\n//         return (\n//           <div style={{ display: \"flex\", alignItems: \"center\" }}>\n//             <span style={{ marginRight: 8 }}>{amount}</span>\n//             {iconUrl && (\n//               <img\n//                 src={iconUrl}\n//                 alt={currencyName}\n//                 style={{ width: 24, height: 24, marginRight: 8 }}\n//               />\n//             )}\n//             <span>{currencyName}</span>\n//           </div>\n//         );\n//       },\n//     },\n//     { field: \"wantCurrency\", headerName: \"Want Currency\", width: 150 },\n//     { field: \"lastUpdated\", headerName: \"Last Updated\", width: 180 },\n//     { field: \"rowType\", headerName: \"Type\", width: 100 },\n//     { field: \"haveAmount\", headerName: \"Have Amt\", type: \"number\", width: 100 },\n//     { field: \"wantAmount\", headerName: \"Want Amt\", type: \"number\", width: 100 },\n//     { field: \"stock\", headerName: \"Stock\", type: \"number\", width: 100 },\n//   ];\n// }\n// Helper: Flatten Exchanges\nfunction flattenExchanges(pricesJson){if(!pricesJson||!pricesJson.exchanges){console.error(\"Invalid data structure received:\",pricesJson);return[];}let rowId=1;const rows=[];pricesJson.exchanges.forEach(exchange=>{const{haveCurrency,wantCurrency,lastUpdated,offers,competingTrades}=exchange;// If there's at least one offer, push the first\nif(offers&&offers.length>0){const firstOffer=offers[0];rows.push({id:rowId++,rowType:\"offer\",haveCurrency:haveCurrency,wantCurrency,lastUpdated,haveAmount:firstOffer.wantAmount,wantAmount:firstOffer.haveAmount,stock:firstOffer.stock});}// If there's at least one competing trade, push the first\nif(competingTrades&&competingTrades.length>0){const firstCompeting=competingTrades[0];rows.push({id:rowId++,rowType:\"competing\",haveCurrency,wantCurrency,lastUpdated,haveAmount:firstCompeting.wantAmount,wantAmount:firstCompeting.haveAmount,stock:firstCompeting.stock});}});return rows;}// Main Component\nexport default function PriceDataGrid(){const[rows,setRows]=useState([]);const[currencyIconMap,setCurrencyIconMap]=useState({});const[loading,setLoading]=useState(true);useEffect(()=>{// Fetch currencyOverview.json (Ninja data)\nfetch(\"/faustus-price-checker/currencyOverview.json\").then(res=>res.json()).then(ninjaData=>{const mergedMap=buildCurrencyMap(ninjaData);setCurrencyIconMap(mergedMap);// Console log after processing currencyOverview\nconsole.log(\"Merged Currency Map (Icons & Chaos Equivalents):\",mergedMap);// Fetch faustusPrices.json\nreturn fetch(\"/faustus-price-checker/faustusPrices.json\");}).then(res=>res.json()).then(pricesData=>{const flattenedRows=flattenExchanges(pricesData);setRows(flattenedRows);setLoading(false);}).catch(err=>{console.error(\"Error fetching data:\",err);setLoading(false);});},[]);const columns=getColumns(currencyIconMap);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading data...\"});}return/*#__PURE__*/_jsx(\"div\",{style:{height:800,width:\"100%\"},children:/*#__PURE__*/_jsx(DataGrid,{rows:rows,columns:columns,pageSize:10,rowsPerPageOptions:[5,10,25]})});}","map":{"version":3,"names":["React","useEffect","useState","DataGrid","getColumns","jsx","_jsx","buildCurrencyMap","ninjaData","linesMap","lines","forEach","line","name","currencyTypeName","chaosEquivalent","pay","receive","mergedMap","currencyDetails","c","icon","lineObj","tradeId","flattenExchanges","pricesJson","exchanges","console","error","rowId","rows","exchange","haveCurrency","wantCurrency","lastUpdated","offers","competingTrades","length","firstOffer","push","id","rowType","haveAmount","wantAmount","stock","firstCompeting","PriceDataGrid","setRows","currencyIconMap","setCurrencyIconMap","loading","setLoading","fetch","then","res","json","log","pricesData","flattenedRows","catch","err","columns","children","style","height","width","pageSize","rowsPerPageOptions"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/PriceDataGrid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { getColumns } from \"./ColDefs\";\r\n\r\n// Helper: Build Currency Map\r\nfunction buildCurrencyMap(ninjaData) {\r\n  const linesMap = {}; // Map for chaosEquivalent data\r\n\r\n  // Build a map from \"lines\"\r\n  if (ninjaData && ninjaData.lines) {\r\n    ninjaData.lines.forEach((line) => {\r\n      const name = line.currencyTypeName;\r\n      linesMap[name] = {\r\n        chaosEquivalent: line.chaosEquivalent || 0,\r\n        pay: line.pay,\r\n        receive: line.receive,\r\n      };\r\n    });\r\n  }\r\n\r\n  const mergedMap = {};\r\n\r\n  // Merge with currencyDetails\r\n  if (ninjaData && ninjaData.currencyDetails) {\r\n    ninjaData.currencyDetails.forEach((c) => {\r\n      const name = c.name;\r\n      const icon = c.icon;\r\n      const lineObj = linesMap[name] || {};\r\n\r\n      mergedMap[name] = {\r\n        icon,\r\n        chaosEquivalent: lineObj.chaosEquivalent || 0,\r\n        tradeId: c.tradeId,\r\n      };\r\n    });\r\n  }\r\n\r\n  return mergedMap;\r\n}\r\n\r\n// // Helper: Define Columns\r\n// function getColumns(currencyIconMap) {\r\n//   return [\r\n//     {\r\n//       field: \"haveCurrency\",\r\n//       headerName: \"Have Currency\",\r\n//       width: 250,\r\n//       renderCell: (params) => {\r\n//         const currencyName = params.value;\r\n//         const amount = params.row.haveAmount;\r\n//         const iconUrl = currencyIconMap[currencyName]?.icon;\r\n//         return (\r\n//           <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n//             <span style={{ marginRight: 8 }}>{amount}</span>\r\n//             {iconUrl && (\r\n//               <img\r\n//                 src={iconUrl}\r\n//                 alt={currencyName}\r\n//                 style={{ width: 24, height: 24, marginRight: 8 }}\r\n//               />\r\n//             )}\r\n//             <span>{currencyName}</span>\r\n//           </div>\r\n//         );\r\n//       },\r\n//     },\r\n//     { field: \"wantCurrency\", headerName: \"Want Currency\", width: 150 },\r\n//     { field: \"lastUpdated\", headerName: \"Last Updated\", width: 180 },\r\n//     { field: \"rowType\", headerName: \"Type\", width: 100 },\r\n//     { field: \"haveAmount\", headerName: \"Have Amt\", type: \"number\", width: 100 },\r\n//     { field: \"wantAmount\", headerName: \"Want Amt\", type: \"number\", width: 100 },\r\n//     { field: \"stock\", headerName: \"Stock\", type: \"number\", width: 100 },\r\n//   ];\r\n// }\r\n\r\n// Helper: Flatten Exchanges\r\nfunction flattenExchanges(pricesJson) {\r\n  if (!pricesJson || !pricesJson.exchanges) {\r\n    console.error(\"Invalid data structure received:\", pricesJson);\r\n    return [];\r\n  }\r\n\r\n  let rowId = 1;\r\n  const rows = [];\r\n\r\n  pricesJson.exchanges.forEach((exchange) => {\r\n    const { haveCurrency, wantCurrency, lastUpdated, offers, competingTrades } = exchange;\r\n\r\n    // If there's at least one offer, push the first\r\n    if (offers && offers.length > 0) {\r\n      const firstOffer = offers[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"offer\",\r\n        haveCurrency: haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstOffer.wantAmount,\r\n        wantAmount: firstOffer.haveAmount,\r\n        stock: firstOffer.stock,\r\n      });\r\n    }\r\n\r\n    // If there's at least one competing trade, push the first\r\n    if (competingTrades && competingTrades.length > 0) {\r\n      const firstCompeting = competingTrades[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"competing\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstCompeting.wantAmount,\r\n        wantAmount: firstCompeting.haveAmount,\r\n        stock: firstCompeting.stock,\r\n      });\r\n    }\r\n  });\r\n\r\n  return rows;\r\n}\r\n\r\n// Main Component\r\nexport default function PriceDataGrid() {\r\n  const [rows, setRows] = useState([]);\r\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch currencyOverview.json (Ninja data)\r\n    fetch(\"/faustus-price-checker/currencyOverview.json\")\r\n      .then((res) => res.json())\r\n      .then((ninjaData) => {\r\n        const mergedMap = buildCurrencyMap(ninjaData);\r\n        setCurrencyIconMap(mergedMap);\r\n\r\n        // Console log after processing currencyOverview\r\n        console.log(\"Merged Currency Map (Icons & Chaos Equivalents):\", mergedMap);\r\n\r\n        // Fetch faustusPrices.json\r\n        return fetch(\"/faustus-price-checker/faustusPrices.json\");\r\n      })\r\n      .then((res) => res.json())\r\n      .then((pricesData) => {\r\n        const flattenedRows = flattenExchanges(pricesData);\r\n        setRows(flattenedRows);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error fetching data:\", err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const columns = getColumns(currencyIconMap);\r\n\r\n  if (loading) {\r\n    return <div>Loading data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: 800, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}