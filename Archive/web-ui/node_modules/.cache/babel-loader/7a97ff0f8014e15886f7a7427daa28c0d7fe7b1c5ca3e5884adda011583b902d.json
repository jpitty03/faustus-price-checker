{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridDimensionsSelector } from \"../dimensions/index.js\";\nimport { gridRenderContextColumnsSelector } from \"../virtualization/index.js\";\nimport { computeOffsetLeft } from \"../virtualization/useGridVirtualScroller.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../../utils/cellBorderUtils.js\";\nimport { PinnedColumnPosition } from \"../../../internals/constants.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (_, styles) => styles.columnHeaderRow\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  React.useEffect(() => {\n    if (apiRef.current.columnHeadersContainerRef.current) {\n      apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;\n    }\n  }, [apiRef]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    const lastColumnToRender = currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = function (params, children, leftOverflow) {\n    let borderBottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const isPinnedRight = (params === null || params === void 0 ? void 0 : params.position) === PinnedColumnPosition.RIGHT;\n    const isNotPinned = (params === null || params === void 0 ? void 0 : params.position) === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  const getColumnHeaders = function (params) {\n    let other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params === null || params === void 0 ? void 0 : params.position;\n      const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, dimensions.columnsTotalWidth, scrollbarWidth);\n      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      const indexInSection = i;\n      const sectionLength = renderedColumns.length;\n      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: dimensions.headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused,\n        showLeftBorder: showLeftBorder,\n        showRightBorder: showRightBorder\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      children: [leftRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext\n      }), rightRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  const getColumnGroupHeaders = _ref => {\n    var _columnGroupsModel$fi, _columnGroupsModel$fi2, _columnGroupsModel$la, _columnGroupsModel$la2;\n    let {\n      depth,\n      params\n    } = _ref;\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = (_columnGroupsModel$fi = (_columnGroupsModel$fi2 = columnGroupsModel[firstColumnFieldToRender]) === null || _columnGroupsModel$fi2 === void 0 ? void 0 : _columnGroupsModel$fi2[depth]) !== null && _columnGroupsModel$fi !== void 0 ? _columnGroupsModel$fi : null;\n    const firstGroupIndex = rowStructure.findIndex(_ref2 => {\n      let {\n        groupId,\n        columnFields\n      } = _ref2;\n      return groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender);\n    });\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = (_columnGroupsModel$la = (_columnGroupsModel$la2 = columnGroupsModel[lastColumnFieldToRender]) === null || _columnGroupsModel$la2 === void 0 ? void 0 : _columnGroupsModel$la2[depth]) !== null && _columnGroupsModel$la !== void 0 ? _columnGroupsModel$la : null;\n    const lastGroupIndex = rowStructure.findIndex(_ref3 => {\n      let {\n        groupId,\n        columnFields\n      } = _ref3;\n      return groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender);\n    });\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      var _column$computedWidth;\n      const column = columnsLookup[field];\n      return acc + ((_column$computedWidth = column.computedWidth) !== null && _column$computedWidth !== void 0 ? _column$computedWidth : 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map((_ref4, index) => {\n      let {\n        groupId,\n        columnFields\n      } = _ref4;\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, dimensions.columnsTotalWidth, scrollbarWidth);\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === PinnedColumnPosition.LEFT) {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: index === visibleColumnGroupHeader.length - 1,\n        maxDepth: headerGroupingMaxDepth,\n        height: dimensions.groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),\n        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showCellVerticalBorder, gridHasFiller)\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    columnPositions,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    getPinnedCellOffset,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","clsx","styled","useGridSelector","useGridRootProps","useGridPrivateApiContext","useGridApiEventHandler","GridColumnHeaderItem","gridDimensionsSelector","gridRenderContextColumnsSelector","computeOffsetLeft","GridColumnGroupHeader","gridColumnPositionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnGroupsUnwrappedModelSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","GridColumnHeaderSeparatorSides","gridClasses","shouldCellShowLeftBorder","shouldCellShowRightBorder","PinnedColumnPosition","jsx","_jsx","jsxs","_jsxs","GridColumnHeaderRow","name","slot","overridesResolver","_","styles","columnHeaderRow","display","useGridColumnHeaders","props","visibleColumns","sortColumnLookup","filterColumnLookup","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","rootProps","dimensions","columnGroupsModel","columnPositions","renderContext","pinnedColumns","columnsLookup","offsetLeft","left","length","gridHasFiller","columnsTotalWidth","viewportOuterSize","width","useEffect","current","columnHeadersContainerRef","scrollLeft","handleColumnResizeStart","useCallback","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","leftRenderContext","useMemo","firstColumnIndex","lastColumnIndex","rightRenderContext","right","getColumnsToRender","currentContext","firstColumnToRender","lastColumnToRender","renderedColumns","slice","getFillers","children","leftOverflow","borderBottom","arguments","undefined","isPinnedRight","position","RIGHT","isNotPinned","hasScrollbarFiller","leftOffsetWidth","Fragment","role","style","className","filler","header","pinnedRight","borderTop","getColumnHeaders","other","columns","i","colDef","columnIndex","isFirstColumn","tabIndex","hasFocus","open","pinnedPosition","scrollbarWidth","hasScrollY","scrollbarSize","pinnedOffset","computedWidth","siblingWithBorderingSeparator","isSiblingFocused","isLastUnpinned","indexInSection","sectionLength","showLeftBorder","showRightBorder","showCellVerticalBorder","push","columnMenuOpen","filterItemsCounter","headerHeight","isDragging","colIndex","isResizing","isLast","getColumnHeadersRow","ownerState","LEFT","disableReorder","separatorSide","Left","getColumnGroupHeaders","_ref","_columnGroupsModel$fi","_columnGroupsModel$fi2","_columnGroupsModel$la","_columnGroupsModel$la2","depth","columnsToRender","rowStructure","firstColumnFieldToRender","firstGroupToRender","firstGroupIndex","findIndex","_ref2","groupId","columnFields","includes","lastColumnFieldToRender","lastGroupToRender","lastGroupIndex","_ref3","visibleColumnGroupHeader","map","groupStructure","filter","firstVisibleColumnIndex","indexOf","hiddenGroupColumns","reduce","acc","_column$computedWidth","column","_ref4","index","headerInfo","fields","isLastColumn","maxDepth","height","groupHeaderHeight","getColumnGroupHeadersRows","headerRows","maxLastColumn","getInnerProps"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridDimensionsSelector } from \"../dimensions/index.js\";\nimport { gridRenderContextColumnsSelector } from \"../virtualization/index.js\";\nimport { computeOffsetLeft } from \"../virtualization/useGridVirtualScroller.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../../utils/cellBorderUtils.js\";\nimport { PinnedColumnPosition } from \"../../../internals/constants.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow',\n  overridesResolver: (_, styles) => styles.columnHeaderRow\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const dimensions = useGridSelector(apiRef, gridDimensionsSelector);\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const gridHasFiller = dimensions.columnsTotalWidth < dimensions.viewportOuterSize.width;\n  React.useEffect(() => {\n    if (apiRef.current.columnHeadersContainerRef.current) {\n      apiRef.current.columnHeadersContainerRef.current.scrollLeft = 0;\n    }\n  }, [apiRef]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    const lastColumnToRender = currentContext.lastColumnIndex;\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderBottom = false) => {\n    const isPinnedRight = params?.position === PinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, dimensions.columnsTotalWidth, scrollbarWidth);\n      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      const indexInSection = i;\n      const sectionLength = renderedColumns.length;\n      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: dimensions.headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused,\n        showLeftBorder: showLeftBorder,\n        showRightBorder: showRightBorder\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      children: [leftRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext\n      }), rightRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = columnsLookup[field];\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const scrollbarWidth = dimensions.hasScrollY ? dimensions.scrollbarSize : 0;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, dimensions.columnsTotalWidth, scrollbarWidth);\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === PinnedColumnPosition.LEFT) {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: index === visibleColumnGroupHeader.length - 1,\n        maxDepth: headerGroupingMaxDepth,\n        height: dimensions.groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),\n        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showCellVerticalBorder, gridHasFiller)\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    columnPositions,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    getPinnedCellOffset,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}