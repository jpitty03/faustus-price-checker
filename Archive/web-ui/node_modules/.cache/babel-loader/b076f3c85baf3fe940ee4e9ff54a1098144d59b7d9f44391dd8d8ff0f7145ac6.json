{"ast":null,"code":"import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// priceGridColumns.js\nexport const getColumns=currencyIconMap=>[{field:\"haveCurrency\",headerName:\"Have Currency\",width:200,renderCell:params=>{var _currencyIconMap$curr;const currencyName=params.value;const amount=params.row.haveAmount;const iconUrl=(_currencyIconMap$curr=currencyIconMap[currencyName])===null||_currencyIconMap$curr===void 0?void 0:_currencyIconMap$curr.icon;return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[/*#__PURE__*/_jsx(\"span\",{style:{marginRight:8},children:amount}),iconUrl&&/*#__PURE__*/_jsx(\"img\",{src:iconUrl,alt:currencyName,style:{width:24,height:24,marginRight:8}}),/*#__PURE__*/_jsx(\"span\",{children:currencyName})]});}},// {\n//     field: \"haveAmount\",\n//     headerName: \"Have Amt\",\n//     type: \"number\",\n//     width: 100\n// },\n{field:\"wantCurrency\",headerName:\"Want Currency\",width:200,renderCell:params=>{var _currencyIconMap$curr2;const currencyName=params.value;const amount=params.row.wantAmount;const iconUrl=(_currencyIconMap$curr2=currencyIconMap[currencyName])===null||_currencyIconMap$curr2===void 0?void 0:_currencyIconMap$curr2.icon;return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[/*#__PURE__*/_jsx(\"span\",{style:{marginRight:8},children:amount}),iconUrl&&/*#__PURE__*/_jsx(\"img\",{src:iconUrl,alt:currencyName,style:{width:24,height:24,marginRight:8}}),/*#__PURE__*/_jsx(\"span\",{children:currencyName})]});}},{field:\"stock\",headerName:\"Stock\",type:\"number\",width:100},// {\n//     field: \"wantAmount\",\n//     headerName: \"Want Amt\",\n//     type: \"number\",\n//     width: 100\n// },\n{field:\"rowType\",headerName:\"Type\",width:100},{field:\"ninjaPrice\",headerName:\"Ninja Price\",type:\"number\",width:150,renderCell:params=>{var _currencyIconMap$curr3,_currencyIconMap$Chao;const currencyName=params.row.wantCurrency;const chaosEquivalent=((_currencyIconMap$curr3=currencyIconMap[currencyName])===null||_currencyIconMap$curr3===void 0?void 0:_currencyIconMap$curr3.chaosEquivalent)||\"N/A\";const iconUrl=(_currencyIconMap$Chao=currencyIconMap['Chaos Orb'])===null||_currencyIconMap$Chao===void 0?void 0:_currencyIconMap$Chao.icon;return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[iconUrl&&/*#__PURE__*/_jsx(\"img\",{src:iconUrl,alt:currencyName,style:{width:24,height:24,marginRight:8}}),/*#__PURE__*/_jsx(\"span\",{children:chaosEquivalent})]});}},{field:\"lastUpdated\",headerName:\"Last Updated\",width:180,renderCell:params=>{const date=new Date(params.value);return date.toLocaleDateString('en-US',{year:'2-digit',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',second:'2-digit'});}}];export default function buildCurrencyMap(ninjaData){// ninjaData looks like:\n// {\n//   \"lines\": [\n//     { \"currencyTypeName\": \"Divine Orb\", \"chaosEquivalent\": 170.05, ... },\n//     ...\n//   ],\n//   \"currencyDetails\": [\n//     { \"id\": 3, \"icon\": \"...\", \"name\": \"Divine Orb\", \"tradeId\": \"divine\" },\n//     ...\n//   ]\n// }\nconst linesMap={};// For quick lookup of chaosEquivalent (and more) by currency name\n// 1) Build a map from \"Divine Orb\" => { chaosEquivalent, lines data, etc. }\nif(ninjaData.lines){ninjaData.lines.forEach(line=>{const name=line.currencyTypeName;// e.g. \"Divine Orb\"\nlinesMap[name]={chaosEquivalent:line.chaosEquivalent// You could store other fields like pay/receive if desired\n// pay: line.pay,\n// receive: line.receive\n};});}// 2) Now merge with \"currencyDetails\"\nconst mergedMap={};if(ninjaData.currencyDetails){ninjaData.currencyDetails.forEach(c=>{const name=c.name;// e.g. \"Divine Orb\"\nconst icon=c.icon;const lineObj=linesMap[name]||{};// mergedMap[\"Divine Orb\"] = { icon, chaosEquivalent, ... }\nmergedMap[name]={icon,chaosEquivalent:lineObj.chaosEquivalent||0,// fallback if not found\ntradeId:c.tradeId// ... any other fields you want\n};});}return mergedMap;}","map":{"version":3,"names":["getColumns","currencyIconMap","field","headerName","width","renderCell","params","_currencyIconMap$curr","currencyName","value","amount","row","haveAmount","iconUrl","icon","_jsxs","style","display","alignItems","children","_jsx","marginRight","src","alt","height","_currencyIconMap$curr2","wantAmount","type","_currencyIconMap$curr3","_currencyIconMap$Chao","wantCurrency","chaosEquivalent","date","Date","toLocaleDateString","year","month","day","hour","minute","second","buildCurrencyMap","ninjaData","linesMap","lines","forEach","line","name","currencyTypeName","mergedMap","currencyDetails","c","lineObj","tradeId"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/ColDefs.js"],"sourcesContent":["// priceGridColumns.js\r\n\r\nexport const getColumns = (currencyIconMap) => [\r\n    {\r\n        field: \"haveCurrency\",\r\n        headerName: \"Have Currency\",\r\n        width: 200,\r\n        renderCell: (params) => {\r\n            const currencyName = params.value;\r\n            const amount = params.row.haveAmount;\r\n            const iconUrl = currencyIconMap[currencyName]?.icon;\r\n            return (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span style={{ marginRight: 8 }}>{amount}</span>\r\n                    {iconUrl && (\r\n                        <img\r\n                            src={iconUrl}\r\n                            alt={currencyName}\r\n                            style={{ width: 24, height: 24, marginRight: 8 }}\r\n                        />\r\n                    )}\r\n                    <span>{currencyName}</span>\r\n                </div>\r\n            );\r\n        },\r\n    },\r\n    // {\r\n    //     field: \"haveAmount\",\r\n    //     headerName: \"Have Amt\",\r\n    //     type: \"number\",\r\n    //     width: 100\r\n    // },\r\n    {\r\n        field: \"wantCurrency\",\r\n        headerName: \"Want Currency\",\r\n        width: 200,\r\n        renderCell: (params) => {\r\n            const currencyName = params.value;\r\n            const amount = params.row.wantAmount;\r\n            const iconUrl = currencyIconMap[currencyName]?.icon;\r\n            return (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span style={{ marginRight: 8 }}>{amount}</span>\r\n                    {iconUrl && (\r\n                        <img\r\n                            src={iconUrl}\r\n                            alt={currencyName}\r\n                            style={{ width: 24, height: 24, marginRight: 8 }}\r\n                        />\r\n                    )}\r\n                    <span>{currencyName}</span>\r\n                </div>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        field: \"stock\",\r\n        headerName: \"Stock\",\r\n        type: \"number\",\r\n        width: 100\r\n    },\r\n    // {\r\n    //     field: \"wantAmount\",\r\n    //     headerName: \"Want Amt\",\r\n    //     type: \"number\",\r\n    //     width: 100\r\n    // },\r\n    {\r\n        field: \"rowType\",\r\n        headerName: \"Type\",\r\n        width: 100\r\n    },\r\n    {\r\n        field: \"ninjaPrice\",\r\n        headerName: \"Ninja Price\",\r\n        type: \"number\",\r\n        width: 150,\r\n        renderCell: (params) => {\r\n            const currencyName = params.row.wantCurrency;\r\n            const chaosEquivalent = currencyIconMap[currencyName]?.chaosEquivalent || \"N/A\";\r\n            const iconUrl = currencyIconMap['Chaos Orb']?.icon;\r\n\r\n            return (\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    {iconUrl && (\r\n                        <img\r\n                            src={iconUrl}\r\n                            alt={currencyName}\r\n                            style={{ width: 24, height: 24, marginRight: 8 }}\r\n                        />\r\n                    )}\r\n                    <span>{chaosEquivalent}</span>\r\n                </div>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        field: \"lastUpdated\",\r\n        headerName: \"Last Updated\",\r\n        width: 180,\r\n        renderCell: (params) => {\r\n            const date = new Date(params.value);\r\n            return date.toLocaleDateString('en-US', {\r\n                year: '2-digit',\r\n                month: '2-digit',\r\n                day: '2-digit',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit'\r\n            });\r\n        }\r\n    }\r\n];\r\n\r\nexport default function buildCurrencyMap(ninjaData) {\r\n    // ninjaData looks like:\r\n    // {\r\n    //   \"lines\": [\r\n    //     { \"currencyTypeName\": \"Divine Orb\", \"chaosEquivalent\": 170.05, ... },\r\n    //     ...\r\n    //   ],\r\n    //   \"currencyDetails\": [\r\n    //     { \"id\": 3, \"icon\": \"...\", \"name\": \"Divine Orb\", \"tradeId\": \"divine\" },\r\n    //     ...\r\n    //   ]\r\n    // }\r\n\r\n    const linesMap = {};  // For quick lookup of chaosEquivalent (and more) by currency name\r\n\r\n    // 1) Build a map from \"Divine Orb\" => { chaosEquivalent, lines data, etc. }\r\n    if (ninjaData.lines) {\r\n        ninjaData.lines.forEach((line) => {\r\n            const name = line.currencyTypeName; // e.g. \"Divine Orb\"\r\n            linesMap[name] = {\r\n                chaosEquivalent: line.chaosEquivalent,\r\n                // You could store other fields like pay/receive if desired\r\n                // pay: line.pay,\r\n                // receive: line.receive\r\n            };\r\n        });\r\n    }\r\n\r\n    // 2) Now merge with \"currencyDetails\"\r\n    const mergedMap = {};\r\n\r\n    if (ninjaData.currencyDetails) {\r\n        ninjaData.currencyDetails.forEach((c) => {\r\n            const name = c.name; // e.g. \"Divine Orb\"\r\n            const icon = c.icon;\r\n            const lineObj = linesMap[name] || {};\r\n\r\n            // mergedMap[\"Divine Orb\"] = { icon, chaosEquivalent, ... }\r\n            mergedMap[name] = {\r\n                icon,\r\n                chaosEquivalent: lineObj.chaosEquivalent || 0, // fallback if not found\r\n                tradeId: c.tradeId,\r\n                // ... any other fields you want\r\n            };\r\n        });\r\n    }\r\n\r\n    return mergedMap;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}