{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{DataGrid}from\"@mui/x-data-grid\";// Flatten logic for prices.json\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function flattenExchanges(pricesJson){// pricesJson should look like:\n// {\n//   \"updated\": \"2025-01-26T02:42:40.406188Z\",\n//   \"exchanges\": [\n//       {\n//         \"haveCurrency\": \"...\",\n//         \"wantCurrency\": \"...\",\n//         \"lastUpdated\": \"...\",\n//         \"offers\": [...],\n//         \"competingTrades\": [...]\n//       },\n//       ...\n//   ]\n// }\nlet rowId=1;const rows=[];pricesJson.exchanges.forEach(exchange=>{const{haveCurrency,wantCurrency,lastUpdated,offers,competingTrades}=exchange;// If there's at least one offer, push the first\nif(offers&&offers.length>0){const firstOffer=offers[0];rows.push({id:rowId++,rowType:\"offer\",haveCurrency,wantCurrency,lastUpdated,haveAmount:firstOffer.haveAmount,wantAmount:firstOffer.wantAmount,stock:firstOffer.stock});}// If there's at least one competing, push the first\nif(competingTrades&&competingTrades.length>0){const firstCompeting=competingTrades[0];rows.push({id:rowId++,rowType:\"competing\",haveCurrency,wantCurrency,lastUpdated,haveAmount:firstCompeting.haveAmount,wantAmount:firstCompeting.wantAmount,stock:firstCompeting.stock});}});return rows;}export default function PriceDataGrid(){const[rows,setRows]=useState([]);const[currencyIconMap,setCurrencyIconMap]=useState({});const[loading,setLoading]=useState(true);useEffect(()=>{// Fetch both currencyOverview.json (for icons) and prices.json (for exchange data).\nPromise.all([fetch(\"/faustusPrices.json\").then(res=>res.json()),fetch(\"/faustusPrices.json\").then(res=>res.json())]).then(_ref=>{let[ninjaData,pricesData]=_ref;console.log(\"Fetched JSON Ninja files:\",ninjaData);console.log(\"Fetched JSON faustusPrices files:\",pricesData);// 1. Build icon map from the currencyOverview\nconst iconMap={};if(ninjaData.currencyDetails){ninjaData.currencyDetails.forEach(c=>{iconMap[c.name]=c.icon;});}// 2. Flatten the newly fetched prices.json\nconst flattenedRows=flattenExchanges(pricesData);// 3. Update state\nsetCurrencyIconMap(iconMap);setRows(flattenedRows);setLoading(false);}).catch(err=>{console.error(\"Error fetching JSON files:\",err);setLoading(false);});},[]);const columns=[{field:\"haveCurrency\",headerName:\"Have Currency\",width:200,renderCell:params=>{const currencyName=params.value;const iconUrl=currencyIconMap[currencyName];return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[iconUrl&&/*#__PURE__*/_jsx(\"img\",{src:iconUrl,alt:currencyName,style:{width:24,height:24,marginRight:8}}),currencyName]});}},{field:\"wantCurrency\",headerName:\"Want Currency\",width:130},{field:\"lastUpdated\",headerName:\"Last Updated\",width:180},{field:\"rowType\",headerName:\"Type\",width:100},{field:\"haveAmount\",headerName:\"Have Amt\",type:\"number\",width:100},{field:\"wantAmount\",headerName:\"Want Amt\",type:\"number\",width:100},{field:\"stock\",headerName:\"Stock\",type:\"number\",width:100}];if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading data...\"});}return/*#__PURE__*/_jsx(\"div\",{style:{height:800,width:\"100%\"},children:/*#__PURE__*/_jsx(DataGrid,{rows:rows,columns:columns,pageSize:10,rowsPerPageOptions:[5,10,25]})});}","map":{"version":3,"names":["React","useEffect","useState","DataGrid","jsx","_jsx","jsxs","_jsxs","flattenExchanges","pricesJson","rowId","rows","exchanges","forEach","exchange","haveCurrency","wantCurrency","lastUpdated","offers","competingTrades","length","firstOffer","push","id","rowType","haveAmount","wantAmount","stock","firstCompeting","PriceDataGrid","setRows","currencyIconMap","setCurrencyIconMap","loading","setLoading","Promise","all","fetch","then","res","json","_ref","ninjaData","pricesData","console","log","iconMap","currencyDetails","c","name","icon","flattenedRows","catch","err","error","columns","field","headerName","width","renderCell","params","currencyName","value","iconUrl","style","display","alignItems","children","src","alt","height","marginRight","type","pageSize","rowsPerPageOptions"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/PriceDataGrid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\n// Flatten logic for prices.json\r\nfunction flattenExchanges(pricesJson) {\r\n  // pricesJson should look like:\r\n  // {\r\n  //   \"updated\": \"2025-01-26T02:42:40.406188Z\",\r\n  //   \"exchanges\": [\r\n  //       {\r\n  //         \"haveCurrency\": \"...\",\r\n  //         \"wantCurrency\": \"...\",\r\n  //         \"lastUpdated\": \"...\",\r\n  //         \"offers\": [...],\r\n  //         \"competingTrades\": [...]\r\n  //       },\r\n  //       ...\r\n  //   ]\r\n  // }\r\n\r\n  let rowId = 1;\r\n  const rows = [];\r\n\r\n  pricesJson.exchanges.forEach((exchange) => {\r\n    const { haveCurrency, wantCurrency, lastUpdated, offers, competingTrades } = exchange;\r\n\r\n    // If there's at least one offer, push the first\r\n    if (offers && offers.length > 0) {\r\n      const firstOffer = offers[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"offer\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstOffer.haveAmount,\r\n        wantAmount: firstOffer.wantAmount,\r\n        stock: firstOffer.stock\r\n      });\r\n    }\r\n\r\n    // If there's at least one competing, push the first\r\n    if (competingTrades && competingTrades.length > 0) {\r\n      const firstCompeting = competingTrades[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"competing\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstCompeting.haveAmount,\r\n        wantAmount: firstCompeting.wantAmount,\r\n        stock: firstCompeting.stock\r\n      });\r\n    }\r\n  });\r\n\r\n  return rows;\r\n}\r\n\r\nexport default function PriceDataGrid() {\r\n  const [rows, setRows] = useState([]);\r\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch both currencyOverview.json (for icons) and prices.json (for exchange data).\r\n    Promise.all([\r\n      fetch(\"/faustusPrices.json\").then((res) => res.json()),\r\n      fetch(\"/faustusPrices.json\").then((res) => res.json())\r\n    ])\r\n      .then(([ninjaData, pricesData]) => {\r\n        console.log(\"Fetched JSON Ninja files:\", ninjaData);\r\n        console.log(\"Fetched JSON faustusPrices files:\", pricesData);\r\n        // 1. Build icon map from the currencyOverview\r\n        const iconMap = {};\r\n        if (ninjaData.currencyDetails) {\r\n          ninjaData.currencyDetails.forEach((c) => {\r\n            iconMap[c.name] = c.icon;\r\n          });\r\n        }\r\n\r\n        // 2. Flatten the newly fetched prices.json\r\n        const flattenedRows = flattenExchanges(pricesData);\r\n\r\n        // 3. Update state\r\n        setCurrencyIconMap(iconMap);\r\n        setRows(flattenedRows);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error fetching JSON files:\", err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      field: \"haveCurrency\",\r\n      headerName: \"Have Currency\",\r\n      width: 200,\r\n      renderCell: (params) => {\r\n        const currencyName = params.value;\r\n        const iconUrl = currencyIconMap[currencyName];\r\n        return (\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            {iconUrl && (\r\n              <img\r\n                src={iconUrl}\r\n                alt={currencyName}\r\n                style={{ width: 24, height: 24, marginRight: 8 }}\r\n              />\r\n            )}\r\n            {currencyName}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { field: \"wantCurrency\", headerName: \"Want Currency\", width: 130 },\r\n    { field: \"lastUpdated\", headerName: \"Last Updated\", width: 180 },\r\n    { field: \"rowType\", headerName: \"Type\", width: 100 },\r\n    { field: \"haveAmount\", headerName: \"Have Amt\", type: \"number\", width: 100 },\r\n    { field: \"wantAmount\", headerName: \"Want Amt\", type: \"number\", width: 100 },\r\n    { field: \"stock\", headerName: \"Stock\", type: \"number\", width: 100 }\r\n  ];\r\n\r\n  if (loading) {\r\n    return <div>Loading data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: 800, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}