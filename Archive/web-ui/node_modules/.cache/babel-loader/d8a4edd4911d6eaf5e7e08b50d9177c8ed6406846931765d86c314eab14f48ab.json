{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetTop\", \"offsetLeft\", \"columnsTotalWidth\", \"firstColumnIndex\", \"lastColumnIndex\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"showBottomBorder\", \"scrollbarWidth\", \"gridHasFiller\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { GridEditModes, GridRowModes, GridCellModes } from \"../models/gridEditRowModel.js\";\nimport { gridClasses } from \"../constants/gridClasses.js\";\nimport { composeGridClasses } from \"../utils/composeGridClasses.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../utils/cellBorderUtils.js\";\nimport { gridColumnPositionsSelector } from \"../hooks/features/columns/gridColumnsSelector.js\";\nimport { useGridSelector, objectShallowCompare } from \"../hooks/utils/useGridSelector.js\";\nimport { useGridVisibleRows } from \"../hooks/utils/useGridVisibleRows.js\";\nimport { findParentElementFromClassName, isEventTargetInPortal } from \"../utils/domUtils.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from \"../colDef/gridCheckboxSelectionColDef.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../colDef/gridActionsColDef.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD, PinnedColumnPosition } from \"../internals/constants.js\";\nimport { gridSortModelSelector } from \"../hooks/features/sorting/gridSortingSelector.js\";\nimport { gridRowMaximumTreeDepthSelector } from \"../hooks/features/rows/gridRowsSelector.js\";\nimport { gridEditRowsStateSelector } from \"../hooks/features/editing/gridEditingSelectors.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"./GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../internals/utils/getPinnedCellOffset.js\";\nimport { useGridConfiguration } from \"../hooks/utils/useGridConfiguration.js\";\nimport { useGridPrivateApiContext } from \"../hooks/utils/useGridPrivateApiContext.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridRow = forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      columnsTotalWidth,\n      firstColumnIndex,\n      lastColumnIndex,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      showBottomBorder,\n      scrollbarWidth,\n      gridHasFiller,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridPrivateApiContext();\n  const configuration = useGridConfiguration();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const editing = apiRef.current.getRowMode(rowId) === GridRowModes.Edit;\n  const editable = rootProps.editMode === GridEditModes.Row;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= lastColumnIndex;\n  const classes = composeGridClasses(rootProps.classes, {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', showBottomBorder && 'row--borderBottom', rowHeight === 'auto' && 'row--dynamicHeight']\n  });\n  const getRowAriaAttributes = configuration.hooks.useGridRowAriaAttributes();\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // Pinned rows are not part of the visible rows\n      if (rowIndex !== undefined) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    if (ref.current && rowHeight === 'auto') {\n      return apiRef.current.observeRowHeight(ref.current, rowId);\n    }\n    return undefined;\n  }, [apiRef, currentPage.range, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell === null || cell === void 0 ? void 0 : cell.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if ((column === null || column === void 0 ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const heightEntry = useGridSelector(apiRef, () => _extends({}, apiRef.current.getRowHeightEntry(rowId)), objectShallowCompare);\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight: rowHeight,\n      '--height': typeof rowHeight === 'number' ? \"\".concat(rowHeight, \"px\") : rowHeight\n    });\n    if (heightEntry.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = heightEntry.spacingTop;\n    }\n    if (heightEntry.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += heightEntry.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, heightEntry, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  const ariaAttributes = rowNode ? getRowAriaAttributes(rowNode, index) : undefined;\n  if (typeof rootProps.getRowClassName === 'function') {\n    var _currentPage$range;\n    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) === null || _currentPage$range === void 0 ? void 0 : _currentPage$range.firstRowIndex) || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const getCell = function (column, indexInSection, indexRelativeToAllColumns, sectionLength) {\n    var _cellColSpanInfo$cell, _cellColSpanInfo$cell2, _editRowsState$rowId$, _editRowsState$rowId;\n    let pinnedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PinnedColumnPosition.NONE;\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo !== null && cellColSpanInfo !== void 0 && cellColSpanInfo.spannedByColSpan) {\n      return null;\n    }\n    const width = (_cellColSpanInfo$cell = cellColSpanInfo === null || cellColSpanInfo === void 0 ? void 0 : cellColSpanInfo.cellProps.width) !== null && _cellColSpanInfo$cell !== void 0 ? _cellColSpanInfo$cell : column.computedWidth;\n    const colSpan = (_cellColSpanInfo$cell2 = cellColSpanInfo === null || cellColSpanInfo === void 0 ? void 0 : cellColSpanInfo.cellProps.colSpan) !== null && _cellColSpanInfo$cell2 !== void 0 ? _cellColSpanInfo$cell2 : 1;\n    const pinnedOffset = getPinnedCellOffset(pinnedPosition, column.computedWidth, indexRelativeToAllColumns, columnPositions, columnsTotalWidth, scrollbarWidth);\n    if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        type: column.type,\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align\n      }, column.field);\n    }\n    const editCellState = (_editRowsState$rowId$ = (_editRowsState$rowId = editRowsState[rowId]) === null || _editRowsState$rowId === void 0 ? void 0 : _editRowsState$rowId[column.field]) !== null && _editRowsState$rowId$ !== void 0 ? _editRowsState$rowId$ : null;\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const isEditingRows = Object.keys(editRowsState).length > 0;\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedColumnPosition.VIRTUAL;\n    const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n    const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      editCellState: editCellState,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      showLeftBorder: showLeftBorder,\n      showRightBorder: showRightBorder\n    }, slotProps === null || slotProps === void 0 ? void 0 : slotProps.cell), column.field);\n  };\n\n  /* Start of rendering */\n\n  if (!rowNode) {\n    return null;\n  }\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedColumnPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedColumnPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  for (let i = firstColumnIndex; i < lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    if (!column) {\n      continue;\n    }\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    style: style\n  }, ariaAttributes, eventHandlers, other, {\n    ref: handleRef,\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: clsx(gridClasses.cell, gridClasses.cellEmpty)\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnsTotalWidth: PropTypes.number.isRequired,\n  firstColumnIndex: PropTypes.number.isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  gridHasFiller: PropTypes.bool.isRequired,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  lastColumnIndex: PropTypes.number.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  offsetTop: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  scrollbarWidth: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  showBottomBorder: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_useForkRef","useForkRef","fastMemo","forwardRef","GridEditModes","GridRowModes","GridCellModes","gridClasses","composeGridClasses","useGridRootProps","shouldCellShowLeftBorder","shouldCellShowRightBorder","gridColumnPositionsSelector","useGridSelector","objectShallowCompare","useGridVisibleRows","findParentElementFromClassName","isEventTargetInPortal","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GRID_DETAIL_PANEL_TOGGLE_FIELD","PinnedColumnPosition","gridSortModelSelector","gridRowMaximumTreeDepthSelector","gridEditRowsStateSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","useGridConfiguration","useGridPrivateApiContext","jsx","_jsx","jsxs","_jsxs","GridRow","props","refProp","selected","rowId","row","index","style","styleProp","rowHeight","className","visibleColumns","pinnedColumns","offsetLeft","columnsTotalWidth","firstColumnIndex","lastColumnIndex","focusedColumnIndex","isFirstVisible","isLastVisible","isNotVisible","showBottomBorder","scrollbarWidth","gridHasFiller","onClick","onDoubleClick","onMouseEnter","onMouseLeave","onMouseOut","onMouseOver","other","apiRef","configuration","ref","useRef","rootProps","currentPage","sortModel","treeDepth","columnPositions","editRowsState","handleRef","rowNode","current","getRowNode","editing","getRowMode","Edit","editable","editMode","Row","hasFocusCell","undefined","hasVirtualFocusCellLeft","left","length","hasVirtualFocusCellRight","right","classes","root","getRowAriaAttributes","hooks","useGridRowAriaAttributes","useLayoutEffect","range","rowIndex","getRowIndexRelativeToVisibleRows","unstable_setLastMeasuredRowIndex","observeRowHeight","publish","useCallback","eventName","propHandler","event","getRow","publishEvent","getRowParams","publishClick","cell","target","field","getAttribute","getCellMode","column","getColumn","type","slots","slotProps","disableColumnReorder","rowReordering","heightEntry","getRowHeightEntry","useMemo","opacity","width","height","rowStyle","maxHeight","minHeight","concat","spacingTop","property","rowSpacingType","spacingBottom","propertyValue","parseInt","rowClassNames","unstable_applyPipeProcessors","ariaAttributes","getRowClassName","_currentPage$range","indexRelativeToCurrentPage","firstRowIndex","rowParams","rows","push","getCell","indexInSection","indexRelativeToAllColumns","sectionLength","_cellColSpanInfo$cell","_cellColSpanInfo$cell2","_editRowsState$rowId$","_editRowsState$rowId","pinnedPosition","arguments","NONE","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","cellProps","computedWidth","colSpan","pinnedOffset","skeletonCell","align","editCellState","isReorderCell","isEditingRows","Object","keys","canReorderColumn","disableReorder","canReorderRow","disableDragEvents","cellIsNotVisible","VIRTUAL","showLeftBorder","showRightBorder","showCellVerticalBorder","colIndex","leftCells","map","i","LEFT","rightCells","RIGHT","middleColumnsLength","cells","eventHandlers","role","children","cellOffsetLeft","cellEmpty","pinnedRight","process","env","NODE_ENV","propTypes","number","isRequired","bool","offsetTop","func","object","oneOfType","oneOf","string","arrayOf","MemoizedGridRow"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/components/GridRow.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"selected\", \"rowId\", \"row\", \"index\", \"style\", \"rowHeight\", \"className\", \"visibleColumns\", \"pinnedColumns\", \"offsetTop\", \"offsetLeft\", \"columnsTotalWidth\", \"firstColumnIndex\", \"lastColumnIndex\", \"focusedColumnIndex\", \"isFirstVisible\", \"isLastVisible\", \"isNotVisible\", \"showBottomBorder\", \"scrollbarWidth\", \"gridHasFiller\", \"onClick\", \"onDoubleClick\", \"onMouseEnter\", \"onMouseLeave\", \"onMouseOut\", \"onMouseOver\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { fastMemo } from '@mui/x-internals/fastMemo';\nimport { forwardRef } from '@mui/x-internals/forwardRef';\nimport { GridEditModes, GridRowModes, GridCellModes } from \"../models/gridEditRowModel.js\";\nimport { gridClasses } from \"../constants/gridClasses.js\";\nimport { composeGridClasses } from \"../utils/composeGridClasses.js\";\nimport { useGridRootProps } from \"../hooks/utils/useGridRootProps.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../utils/cellBorderUtils.js\";\nimport { gridColumnPositionsSelector } from \"../hooks/features/columns/gridColumnsSelector.js\";\nimport { useGridSelector, objectShallowCompare } from \"../hooks/utils/useGridSelector.js\";\nimport { useGridVisibleRows } from \"../hooks/utils/useGridVisibleRows.js\";\nimport { findParentElementFromClassName, isEventTargetInPortal } from \"../utils/domUtils.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from \"../colDef/gridCheckboxSelectionColDef.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../colDef/gridActionsColDef.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD, PinnedColumnPosition } from \"../internals/constants.js\";\nimport { gridSortModelSelector } from \"../hooks/features/sorting/gridSortingSelector.js\";\nimport { gridRowMaximumTreeDepthSelector } from \"../hooks/features/rows/gridRowsSelector.js\";\nimport { gridEditRowsStateSelector } from \"../hooks/features/editing/gridEditingSelectors.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"./GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../internals/utils/getPinnedCellOffset.js\";\nimport { useGridConfiguration } from \"../hooks/utils/useGridConfiguration.js\";\nimport { useGridPrivateApiContext } from \"../hooks/utils/useGridPrivateApiContext.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GridRow = forwardRef(function GridRow(props, refProp) {\n  const {\n      selected,\n      rowId,\n      row,\n      index,\n      style: styleProp,\n      rowHeight,\n      className,\n      visibleColumns,\n      pinnedColumns,\n      offsetLeft,\n      columnsTotalWidth,\n      firstColumnIndex,\n      lastColumnIndex,\n      focusedColumnIndex,\n      isFirstVisible,\n      isLastVisible,\n      isNotVisible,\n      showBottomBorder,\n      scrollbarWidth,\n      gridHasFiller,\n      onClick,\n      onDoubleClick,\n      onMouseEnter,\n      onMouseLeave,\n      onMouseOut,\n      onMouseOver\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridPrivateApiContext();\n  const configuration = useGridConfiguration();\n  const ref = React.useRef(null);\n  const rootProps = useGridRootProps();\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const handleRef = useForkRef(ref, refProp);\n  const rowNode = apiRef.current.getRowNode(rowId);\n  const editing = apiRef.current.getRowMode(rowId) === GridRowModes.Edit;\n  const editable = rootProps.editMode === GridEditModes.Row;\n  const hasFocusCell = focusedColumnIndex !== undefined;\n  const hasVirtualFocusCellLeft = hasFocusCell && focusedColumnIndex >= pinnedColumns.left.length && focusedColumnIndex < firstColumnIndex;\n  const hasVirtualFocusCellRight = hasFocusCell && focusedColumnIndex < visibleColumns.length - pinnedColumns.right.length && focusedColumnIndex >= lastColumnIndex;\n  const classes = composeGridClasses(rootProps.classes, {\n    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isFirstVisible && 'row--firstVisible', isLastVisible && 'row--lastVisible', showBottomBorder && 'row--borderBottom', rowHeight === 'auto' && 'row--dynamicHeight']\n  });\n  const getRowAriaAttributes = configuration.hooks.useGridRowAriaAttributes();\n  React.useLayoutEffect(() => {\n    if (currentPage.range) {\n      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);\n      // Pinned rows are not part of the visible rows\n      if (rowIndex !== undefined) {\n        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);\n      }\n    }\n    if (ref.current && rowHeight === 'auto') {\n      return apiRef.current.observeRowHeight(ref.current, rowId);\n    }\n    return undefined;\n  }, [apiRef, currentPage.range, rowHeight, rowId]);\n  const publish = React.useCallback((eventName, propHandler) => event => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(rowId)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);\n    if (propHandler) {\n      propHandler(event);\n    }\n  }, [apiRef, rowId]);\n  const publishClick = React.useCallback(event => {\n    const cell = findParentElementFromClassName(event.target, gridClasses.cell);\n    const field = cell?.getAttribute('data-field');\n\n    // Check if the field is available because the cell that fills the empty\n    // space of the row has no field.\n    if (field) {\n      // User clicked in the checkbox added by checkboxSelection\n      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n        return;\n      }\n\n      // User opened a detail panel\n      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n        return;\n      }\n\n      // User reorders a row\n      if (field === '__reorder__') {\n        return;\n      }\n\n      // User is editing a cell\n      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {\n        return;\n      }\n\n      // User clicked a button from the \"actions\" column type\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    publish('rowClick', onClick)(event);\n  }, [apiRef, onClick, publish, rowId]);\n  const {\n    slots,\n    slotProps,\n    disableColumnReorder\n  } = rootProps;\n  const rowReordering = rootProps.rowReordering;\n  const heightEntry = useGridSelector(apiRef, () => _extends({}, apiRef.current.getRowHeightEntry(rowId)), objectShallowCompare);\n  const style = React.useMemo(() => {\n    if (isNotVisible) {\n      return {\n        opacity: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const rowStyle = _extends({}, styleProp, {\n      maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,\n      // max-height doesn't support \"auto\"\n      minHeight: rowHeight,\n      '--height': typeof rowHeight === 'number' ? `${rowHeight}px` : rowHeight\n    });\n    if (heightEntry.spacingTop) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';\n      rowStyle[property] = heightEntry.spacingTop;\n    }\n    if (heightEntry.spacingBottom) {\n      const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';\n      let propertyValue = rowStyle[property];\n      // avoid overriding existing value\n      if (typeof propertyValue !== 'number') {\n        propertyValue = parseInt(propertyValue || '0', 10);\n      }\n      propertyValue += heightEntry.spacingBottom;\n      rowStyle[property] = propertyValue;\n    }\n    return rowStyle;\n  }, [isNotVisible, rowHeight, styleProp, heightEntry, rootProps.rowSpacingType]);\n  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);\n  const ariaAttributes = rowNode ? getRowAriaAttributes(rowNode, index) : undefined;\n  if (typeof rootProps.getRowClassName === 'function') {\n    const indexRelativeToCurrentPage = index - (currentPage.range?.firstRowIndex || 0);\n    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {\n      isFirstVisible: indexRelativeToCurrentPage === 0,\n      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n      indexRelativeToCurrentPage\n    });\n    rowClassNames.push(rootProps.getRowClassName(rowParams));\n  }\n  const getCell = (column, indexInSection, indexRelativeToAllColumns, sectionLength, pinnedPosition = PinnedColumnPosition.NONE) => {\n    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);\n    if (cellColSpanInfo?.spannedByColSpan) {\n      return null;\n    }\n    const width = cellColSpanInfo?.cellProps.width ?? column.computedWidth;\n    const colSpan = cellColSpanInfo?.cellProps.colSpan ?? 1;\n    const pinnedOffset = getPinnedCellOffset(pinnedPosition, column.computedWidth, indexRelativeToAllColumns, columnPositions, columnsTotalWidth, scrollbarWidth);\n    if (rowNode?.type === 'skeletonRow') {\n      return /*#__PURE__*/_jsx(slots.skeletonCell, {\n        type: column.type,\n        width: width,\n        height: rowHeight,\n        field: column.field,\n        align: column.align\n      }, column.field);\n    }\n    const editCellState = editRowsState[rowId]?.[column.field] ?? null;\n\n    // when the cell is a reorder cell we are not allowing to reorder the col\n    // fixes https://github.com/mui/mui-x/issues/11126\n    const isReorderCell = column.field === '__reorder__';\n    const isEditingRows = Object.keys(editRowsState).length > 0;\n    const canReorderColumn = !(disableColumnReorder || column.disableReorder);\n    const canReorderRow = rowReordering && !sortModel.length && treeDepth <= 1 && !isEditingRows;\n    const disableDragEvents = !(canReorderColumn || isReorderCell && canReorderRow);\n    const cellIsNotVisible = pinnedPosition === PinnedColumnPosition.VIRTUAL;\n    const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n    const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);\n    return /*#__PURE__*/_jsx(slots.cell, _extends({\n      column: column,\n      width: width,\n      rowId: rowId,\n      align: column.align || 'left',\n      colIndex: indexRelativeToAllColumns,\n      colSpan: colSpan,\n      disableDragEvents: disableDragEvents,\n      editCellState: editCellState,\n      isNotVisible: cellIsNotVisible,\n      pinnedOffset: pinnedOffset,\n      pinnedPosition: pinnedPosition,\n      showLeftBorder: showLeftBorder,\n      showRightBorder: showRightBorder\n    }, slotProps?.cell), column.field);\n  };\n\n  /* Start of rendering */\n\n  if (!rowNode) {\n    return null;\n  }\n  const leftCells = pinnedColumns.left.map((column, i) => {\n    const indexRelativeToAllColumns = i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.left.length, PinnedColumnPosition.LEFT);\n  });\n  const rightCells = pinnedColumns.right.map((column, i) => {\n    const indexRelativeToAllColumns = visibleColumns.length - pinnedColumns.right.length + i;\n    return getCell(column, i, indexRelativeToAllColumns, pinnedColumns.right.length, PinnedColumnPosition.RIGHT);\n  });\n  const middleColumnsLength = visibleColumns.length - pinnedColumns.left.length - pinnedColumns.right.length;\n  const cells = [];\n  if (hasVirtualFocusCellLeft) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  for (let i = firstColumnIndex; i < lastColumnIndex; i += 1) {\n    const column = visibleColumns[i];\n    const indexInSection = i - pinnedColumns.left.length;\n    if (!column) {\n      continue;\n    }\n    cells.push(getCell(column, indexInSection, i, middleColumnsLength));\n  }\n  if (hasVirtualFocusCellRight) {\n    cells.push(getCell(visibleColumns[focusedColumnIndex], focusedColumnIndex - pinnedColumns.left.length, focusedColumnIndex, middleColumnsLength, PinnedColumnPosition.VIRTUAL));\n  }\n  const eventHandlers = row ? {\n    onClick: publishClick,\n    onDoubleClick: publish('rowDoubleClick', onDoubleClick),\n    onMouseEnter: publish('rowMouseEnter', onMouseEnter),\n    onMouseLeave: publish('rowMouseLeave', onMouseLeave),\n    onMouseOut: publish('rowMouseOut', onMouseOut),\n    onMouseOver: publish('rowMouseOver', onMouseOver)\n  } : null;\n  return /*#__PURE__*/_jsxs(\"div\", _extends({\n    \"data-id\": rowId,\n    \"data-rowindex\": index,\n    role: \"row\",\n    className: clsx(...rowClassNames, classes.root, className),\n    style: style\n  }, ariaAttributes, eventHandlers, other, {\n    ref: handleRef,\n    children: [leftCells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: gridClasses.cellOffsetLeft,\n      style: {\n        width: offsetLeft\n      }\n    }), cells, /*#__PURE__*/_jsx(\"div\", {\n      role: \"presentation\",\n      className: clsx(gridClasses.cell, gridClasses.cellEmpty)\n    }), rightCells, scrollbarWidth !== 0 && /*#__PURE__*/_jsx(ScrollbarFiller, {\n      pinnedRight: pinnedColumns.right.length > 0\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRow.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  columnsTotalWidth: PropTypes.number.isRequired,\n  firstColumnIndex: PropTypes.number.isRequired,\n  /**\n   * Determines which cell has focus.\n   * If `null`, no cell in this row has focus.\n   */\n  focusedColumnIndex: PropTypes.number,\n  gridHasFiller: PropTypes.bool.isRequired,\n  /**\n   * Index of the row in the whole sorted and filtered dataset.\n   * If some rows above have expanded children, this index also take those children into account.\n   */\n  index: PropTypes.number.isRequired,\n  isFirstVisible: PropTypes.bool.isRequired,\n  isLastVisible: PropTypes.bool.isRequired,\n  isNotVisible: PropTypes.bool.isRequired,\n  lastColumnIndex: PropTypes.number.isRequired,\n  offsetLeft: PropTypes.number.isRequired,\n  offsetTop: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pinnedColumns: PropTypes.object.isRequired,\n  row: PropTypes.object.isRequired,\n  rowHeight: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number]).isRequired,\n  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  scrollbarWidth: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  showBottomBorder: PropTypes.bool.isRequired,\n  visibleColumns: PropTypes.arrayOf(PropTypes.object).isRequired\n} : void 0;\nconst MemoizedGridRow = fastMemo(GridRow);\nexport { MemoizedGridRow as GridRow };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}