{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{DataGrid}from\"@mui/x-data-grid\";/**\r\n * Flatten logic for prices.json, which looks like:\r\n * {\r\n *   \"updated\": \"2025-01-26T02:42:40.406188Z\",\r\n *   \"exchanges\": [\r\n *       {\r\n *         \"haveCurrency\": \"...\",\r\n *         \"wantCurrency\": \"...\",\r\n *         \"lastUpdated\": \"...\",\r\n *         \"offers\": [...],\r\n *         \"competingTrades\": [...]\r\n *       },\r\n *       ...\r\n *   ]\r\n * }\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function flattenExchanges(pricesJson){let rowId=1;const rows=[];pricesJson.exchanges.forEach(exchange=>{const{haveCurrency,wantCurrency,lastUpdated,offers,competingTrades}=exchange;// If there's at least one offer, push the first\nif(offers&&offers.length>0){const firstOffer=offers[0];rows.push({id:rowId++,rowType:\"offer\",haveCurrency,wantCurrency,lastUpdated,haveAmount:firstOffer.haveAmount,wantAmount:firstOffer.wantAmount,stock:firstOffer.stock});}// If there's at least one competing, push the first\nif(competingTrades&&competingTrades.length>0){const firstCompeting=competingTrades[0];rows.push({id:rowId++,rowType:\"competing\",haveCurrency,wantCurrency,lastUpdated,haveAmount:firstCompeting.haveAmount,wantAmount:firstCompeting.wantAmount,stock:firstCompeting.stock});}});return rows;}export default function PriceDataGrid(){const[rows,setRows]=useState([]);const[currencyIconMap,setCurrencyIconMap]=useState({});const[loading,setLoading]=useState(true);useEffect(()=>{// 1) First fetch: currencyOverview.json (for icon data)\nfetch(\"/currencyOverview.json\").then(res=>{if(!res.ok){throw new Error(\"Failed to fetch currencyOverview.json: \".concat(res.status));}return res.json();}).then(ninjaData=>{console.log(\"Fetched Ninja Data:\",ninjaData);// Build the icon map\nconst map={};if(ninjaData.currencyDetails){ninjaData.currencyDetails.forEach(c=>{map[c.name]=c.icon;});}setCurrencyIconMap(map);// 2) Second fetch: prices.json (for local exchange data)\nreturn fetch(\"/prices.json\");}).then(res=>{if(!res.ok){throw new Error(\"Failed to fetch prices.json: \".concat(res.status));}return res.json();}).then(pricesData=>{console.log(\"Fetched Prices Data:\",pricesData);// Flatten the \"exchanges\" into rows\nconst flattenedRows=flattenExchanges(pricesData);setRows(flattenedRows);setLoading(false);}).catch(err=>{console.error(\"Error fetching data:\",err);setLoading(false);});},[]);// Define columns for the DataGrid\nconst columns=[{field:\"haveCurrency\",headerName:\"Have Currency\",width:200,renderCell:params=>{const currencyName=params.value;const iconUrl=currencyIconMap[currencyName];return/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",alignItems:\"center\"},children:[iconUrl&&/*#__PURE__*/_jsx(\"img\",{src:iconUrl,alt:currencyName,style:{width:24,height:24,marginRight:8}}),currencyName]});}},{field:\"wantCurrency\",headerName:\"Want Currency\",width:130},{field:\"lastUpdated\",headerName:\"Last Updated\",width:180},{field:\"rowType\",headerName:\"Type\",width:100},{field:\"haveAmount\",headerName:\"Have Amt\",type:\"number\",width:100},{field:\"wantAmount\",headerName:\"Want Amt\",type:\"number\",width:100},{field:\"stock\",headerName:\"Stock\",type:\"number\",width:100}];if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading data...\"});}return/*#__PURE__*/_jsx(\"div\",{style:{height:800,width:\"100%\"},children:/*#__PURE__*/_jsx(DataGrid,{rows:rows,columns:columns,pageSize:10,rowsPerPageOptions:[5,10,25]})});}","map":{"version":3,"names":["React","useEffect","useState","DataGrid","jsx","_jsx","jsxs","_jsxs","flattenExchanges","pricesJson","rowId","rows","exchanges","forEach","exchange","haveCurrency","wantCurrency","lastUpdated","offers","competingTrades","length","firstOffer","push","id","rowType","haveAmount","wantAmount","stock","firstCompeting","PriceDataGrid","setRows","currencyIconMap","setCurrencyIconMap","loading","setLoading","fetch","then","res","ok","Error","concat","status","json","ninjaData","console","log","map","currencyDetails","c","name","icon","pricesData","flattenedRows","catch","err","error","columns","field","headerName","width","renderCell","params","currencyName","value","iconUrl","style","display","alignItems","children","src","alt","height","marginRight","type","pageSize","rowsPerPageOptions"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/PriceDataGrid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\n/**\r\n * Flatten logic for prices.json, which looks like:\r\n * {\r\n *   \"updated\": \"2025-01-26T02:42:40.406188Z\",\r\n *   \"exchanges\": [\r\n *       {\r\n *         \"haveCurrency\": \"...\",\r\n *         \"wantCurrency\": \"...\",\r\n *         \"lastUpdated\": \"...\",\r\n *         \"offers\": [...],\r\n *         \"competingTrades\": [...]\r\n *       },\r\n *       ...\r\n *   ]\r\n * }\r\n */\r\nfunction flattenExchanges(pricesJson) {\r\n  let rowId = 1;\r\n  const rows = [];\r\n\r\n  pricesJson.exchanges.forEach((exchange) => {\r\n    const { haveCurrency, wantCurrency, lastUpdated, offers, competingTrades } = exchange;\r\n\r\n    // If there's at least one offer, push the first\r\n    if (offers && offers.length > 0) {\r\n      const firstOffer = offers[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"offer\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstOffer.haveAmount,\r\n        wantAmount: firstOffer.wantAmount,\r\n        stock: firstOffer.stock\r\n      });\r\n    }\r\n\r\n    // If there's at least one competing, push the first\r\n    if (competingTrades && competingTrades.length > 0) {\r\n      const firstCompeting = competingTrades[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"competing\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstCompeting.haveAmount,\r\n        wantAmount: firstCompeting.wantAmount,\r\n        stock: firstCompeting.stock\r\n      });\r\n    }\r\n  });\r\n\r\n  return rows;\r\n}\r\n\r\nexport default function PriceDataGrid() {\r\n  const [rows, setRows] = useState([]);\r\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // 1) First fetch: currencyOverview.json (for icon data)\r\n    fetch(\"/currencyOverview.json\")\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(`Failed to fetch currencyOverview.json: ${res.status}`);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((ninjaData) => {\r\n        console.log(\"Fetched Ninja Data:\", ninjaData);\r\n\r\n        // Build the icon map\r\n        const map = {};\r\n        if (ninjaData.currencyDetails) {\r\n          ninjaData.currencyDetails.forEach((c) => {\r\n            map[c.name] = c.icon;\r\n          });\r\n        }\r\n        setCurrencyIconMap(map);\r\n\r\n        // 2) Second fetch: prices.json (for local exchange data)\r\n        return fetch(\"/prices.json\");\r\n      })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(`Failed to fetch prices.json: ${res.status}`);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((pricesData) => {\r\n        console.log(\"Fetched Prices Data:\", pricesData);\r\n\r\n        // Flatten the \"exchanges\" into rows\r\n        const flattenedRows = flattenExchanges(pricesData);\r\n        setRows(flattenedRows);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error fetching data:\", err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  // Define columns for the DataGrid\r\n  const columns = [\r\n    {\r\n      field: \"haveCurrency\",\r\n      headerName: \"Have Currency\",\r\n      width: 200,\r\n      renderCell: (params) => {\r\n        const currencyName = params.value;\r\n        const iconUrl = currencyIconMap[currencyName];\r\n        return (\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            {iconUrl && (\r\n              <img\r\n                src={iconUrl}\r\n                alt={currencyName}\r\n                style={{ width: 24, height: 24, marginRight: 8 }}\r\n              />\r\n            )}\r\n            {currencyName}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { field: \"wantCurrency\", headerName: \"Want Currency\", width: 130 },\r\n    { field: \"lastUpdated\", headerName: \"Last Updated\", width: 180 },\r\n    { field: \"rowType\", headerName: \"Type\", width: 100 },\r\n    { field: \"haveAmount\", headerName: \"Have Amt\", type: \"number\", width: 100 },\r\n    { field: \"wantAmount\", headerName: \"Want Amt\", type: \"number\", width: 100 },\r\n    { field: \"stock\", headerName: \"Stock\", type: \"number\", width: 100 }\r\n  ];\r\n\r\n  if (loading) {\r\n    return <div>Loading data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: 800, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}