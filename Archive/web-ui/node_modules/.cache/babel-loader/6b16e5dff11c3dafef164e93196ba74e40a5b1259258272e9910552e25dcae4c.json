{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from \"../../../utils/domUtils.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridListColumnSelector } from \"../listView/gridListViewSelectors.js\";\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef, props) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(\"No row with id #\".concat(id, \" found\"));\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = props.unstable_listView ? gridListColumnSelector(apiRef.current.state) : apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(\"No row with id #\".concat(id, \" found\"));\n    }\n    const rawValue = row[field];\n    const value = colDef !== null && colDef !== void 0 && colDef.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value,\n      isEditable: false,\n      api: {}\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef, props.unstable_listView]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(\"No row with id #\".concat(id, \" found\"));\n    }\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowValue = React.useCallback((row, colDef) => {\n    const field = colDef.field;\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    const value = row[colDef.field];\n    return colDef.valueGetter(value, row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowFormattedValue = React.useCallback((row, colDef) => {\n    const value = getRowValue(row, colDef);\n    if (!colDef || !colDef.valueFormatter) {\n      return value;\n    }\n    return colDef.valueFormatter(value, row, colDef, apiRef);\n  }, [apiRef, getRowValue]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue,\n    getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}","map":{"version":3,"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","gridListColumnSelector","MissingRowIdError","Error","useGridParamsApi","apiRef","props","getColumnHeaderParams","useCallback","field","colDef","current","getColumn","getRowParams","id","row","getRow","concat","params","columns","getAllColumns","getCellParams","unstable_listView","state","rowNode","getRowNode","rawValue","value","valueGetter","cellFocus","cellTabIndex","cellMode","getCellMode","hasFocus","tabIndex","formattedValue","isEditable","api","valueFormatter","isCellEditable","getCellValue","getRowValue","getRowFormattedValue","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","paramsApi"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js"],"sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from \"../../../utils/domUtils.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridListColumnSelector } from \"../listView/gridListViewSelectors.js\";\nexport class MissingRowIdError extends Error {}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef, props) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = props.unstable_listView ? gridListColumnSelector(apiRef.current.state) : apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    const rawValue = row[field];\n    const value = colDef?.valueGetter ? colDef.valueGetter(rawValue, row, colDef, apiRef) : rawValue;\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value,\n      isEditable: false,\n      api: {}\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter(value, row, colDef, apiRef);\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef, props.unstable_listView]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new MissingRowIdError(`No row with id #${id} found`);\n    }\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    return colDef.valueGetter(row[colDef.field], row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowValue = React.useCallback((row, colDef) => {\n    const field = colDef.field;\n    if (!colDef || !colDef.valueGetter) {\n      return row[field];\n    }\n    const value = row[colDef.field];\n    return colDef.valueGetter(value, row, colDef, apiRef);\n  }, [apiRef]);\n  const getRowFormattedValue = React.useCallback((row, colDef) => {\n    const value = getRowValue(row, colDef);\n    if (!colDef || !colDef.valueFormatter) {\n      return value;\n    }\n    return colDef.valueFormatter(value, row, colDef, apiRef);\n  }, [apiRef, getRowValue]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowValue,\n    getRowFormattedValue,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}