{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst axios_1 = __importDefault(require(\"axios\"));\nconst mergeData_1 = __importDefault(require(\"./merge/mergeData\"));\nconst urlGenerator_1 = __importDefault(require(\"../func/urlGenerator\"));\n/**\n * Fetches data from a specified API endpoint, merges relevant data, and returns the result.\n * @param league The game league for which to fetch data.\n * @param type The type of data to fetch. (e.g. \"Currency\", \"Fragment\")\n * @param typeName The name of the type of data to fetch. (e.g. \"CurrencyOverview\", \"ItemOverview\")\n * @returns A promise that resolves to an array of merged objects containing both line and currency details.\n * @throws Throws an error if there's an issue with the API response or data fetching process.\n */\nasync function fetchData(league, typeName, type) {\n  try {\n    // Generate the URL for the specified league, type name, and type\n    const url = (0, urlGenerator_1.default)(league, typeName, type);\n    //axios.get(url) is a promise\n    const response = await axios_1.default.get(url, {\n      headers: {\n        'Accept-Encoding': 'identity'\n      }\n    });\n    //typwName is either currencyoverview or itemoverview\n    if (typeName == \"currencyoverview\") {\n      //if the response has data and lines and currencyDetails\n      if (response.data && response.data.lines && response.data.currencyDetails) {\n        const lines = response.data.lines;\n        const currencyDetails = response.data.currencyDetails;\n        //the join data is the currencyDetails\n        return (0, mergeData_1.default)(lines, currencyDetails);\n      } else {\n        throw new Error(\"Invalid response format from POE Ninja API CurrencyView Type:\".concat(type));\n      }\n    } else if (typeName == \"itemoverview\") {\n      //if the response has data and lines\n      if (response.data && response.data.lines) {\n        return response.data.lines;\n      } else {\n        throw new Error(\"\\\"Invalid response format from POE Ninja API ItemView Type:\".concat(type));\n      }\n    } else {\n      throw new Error(\"Invalid type: \".concat(type));\n    }\n  } catch (error) {\n    throw new Error(\"Error fetching data: \".concat(error.message, \" TypeName:\").concat(typeName, \" and Type:\").concat(type));\n  }\n}\nexports.default = fetchData;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","axios_1","require","mergeData_1","urlGenerator_1","fetchData","league","typeName","type","url","default","response","get","headers","data","lines","currencyDetails","Error","concat","error","message"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/poe-api-manager/dist/lib/modules/poe.ninja/fetch/fetchData.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = __importDefault(require(\"axios\"));\nconst mergeData_1 = __importDefault(require(\"./merge/mergeData\"));\nconst urlGenerator_1 = __importDefault(require(\"../func/urlGenerator\"));\n/**\n * Fetches data from a specified API endpoint, merges relevant data, and returns the result.\n * @param league The game league for which to fetch data.\n * @param type The type of data to fetch. (e.g. \"Currency\", \"Fragment\")\n * @param typeName The name of the type of data to fetch. (e.g. \"CurrencyOverview\", \"ItemOverview\")\n * @returns A promise that resolves to an array of merged objects containing both line and currency details.\n * @throws Throws an error if there's an issue with the API response or data fetching process.\n */\nasync function fetchData(league, typeName, type) {\n    try {\n        // Generate the URL for the specified league, type name, and type\n        const url = (0, urlGenerator_1.default)(league, typeName, type);\n        //axios.get(url) is a promise\n        const response = await axios_1.default.get(url, {\n            headers: {\n                'Accept-Encoding': 'identity',\n            },\n        });\n        //typwName is either currencyoverview or itemoverview\n        if (typeName == \"currencyoverview\") {\n            //if the response has data and lines and currencyDetails\n            if (response.data && response.data.lines && response.data.currencyDetails) {\n                const lines = response.data.lines;\n                const currencyDetails = response.data.currencyDetails;\n                //the join data is the currencyDetails\n                return (0, mergeData_1.default)(lines, currencyDetails);\n            }\n            else {\n                throw new Error(`Invalid response format from POE Ninja API CurrencyView Type:${type}`);\n            }\n        }\n        else if (typeName == \"itemoverview\") {\n            //if the response has data and lines\n            if (response.data && response.data.lines) {\n                return response.data.lines;\n            }\n            else {\n                throw new Error(`\"Invalid response format from POE Ninja API ItemView Type:${type}`);\n            }\n        }\n        else {\n            throw new Error(`Invalid type: ${type}`);\n        }\n    }\n    catch (error) {\n        throw new Error(`Error fetching data: ${error.message} TypeName:${typeName} and Type:${type}`);\n    }\n}\nexports.default = fetchData;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,OAAO,GAAGP,eAAe,CAACQ,OAAO,CAAC,OAAO,CAAC,CAAC;AACjD,MAAMC,WAAW,GAAGT,eAAe,CAACQ,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACjE,MAAME,cAAc,GAAGV,eAAe,CAACQ,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeG,SAASA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EAC7C,IAAI;IACA;IACA,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAEL,cAAc,CAACM,OAAO,EAAEJ,MAAM,EAAEC,QAAQ,EAAEC,IAAI,CAAC;IAC/D;IACA,MAAMG,QAAQ,GAAG,MAAMV,OAAO,CAACS,OAAO,CAACE,GAAG,CAACH,GAAG,EAAE;MAC5CI,OAAO,EAAE;QACL,iBAAiB,EAAE;MACvB;IACJ,CAAC,CAAC;IACF;IACA,IAAIN,QAAQ,IAAI,kBAAkB,EAAE;MAChC;MACA,IAAII,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,KAAK,IAAIJ,QAAQ,CAACG,IAAI,CAACE,eAAe,EAAE;QACvE,MAAMD,KAAK,GAAGJ,QAAQ,CAACG,IAAI,CAACC,KAAK;QACjC,MAAMC,eAAe,GAAGL,QAAQ,CAACG,IAAI,CAACE,eAAe;QACrD;QACA,OAAO,CAAC,CAAC,EAAEb,WAAW,CAACO,OAAO,EAAEK,KAAK,EAAEC,eAAe,CAAC;MAC3D,CAAC,MACI;QACD,MAAM,IAAIC,KAAK,iEAAAC,MAAA,CAAiEV,IAAI,CAAE,CAAC;MAC3F;IACJ,CAAC,MACI,IAAID,QAAQ,IAAI,cAAc,EAAE;MACjC;MACA,IAAII,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,KAAK,EAAE;QACtC,OAAOJ,QAAQ,CAACG,IAAI,CAACC,KAAK;MAC9B,CAAC,MACI;QACD,MAAM,IAAIE,KAAK,+DAAAC,MAAA,CAA8DV,IAAI,CAAE,CAAC;MACxF;IACJ,CAAC,MACI;MACD,MAAM,IAAIS,KAAK,kBAAAC,MAAA,CAAkBV,IAAI,CAAE,CAAC;IAC5C;EACJ,CAAC,CACD,OAAOW,KAAK,EAAE;IACV,MAAM,IAAIF,KAAK,yBAAAC,MAAA,CAAyBC,KAAK,CAACC,OAAO,gBAAAF,MAAA,CAAaX,QAAQ,gBAAAW,MAAA,CAAaV,IAAI,CAAE,CAAC;EAClG;AACJ;AACAT,OAAO,CAACW,OAAO,GAAGL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}