{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridEditModes, GridRowModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridRowsDataRowIdToIdLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from \"../../../models/params/gridRowParams.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(undefined);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI X: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI X: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) === null || _nextFocusedCell$curr === void 0 ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      const column = apiRef.current.getColumn(field);\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        if (deleteValue) {\n          newValue = getDefaultCellValue(column);\n        } else if (initialValue) {\n          newValue = initialValue;\n        }\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: !!column.preProcessEditCellProps && deleteValue\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n    columnFields.filter(field => !!apiRef.current.getColumn(field).preProcessEditCellProps && deleteValue).forEach(field => {\n      const column = apiRef.current.getColumn(field);\n      const value = apiRef.current.getCellValue(id, field);\n      const newValue = deleteValue ? getDefaultCellValue(column) : initialValue !== null && initialValue !== void 0 ? initialValue : value;\n      Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps[field],\n        hasChanged: newValue !== value\n      })).then(processedProps => {\n        // Check if still in edit mode before updating\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          const editingState = gridEditRowsStateSelector(apiRef.current.state);\n          updateOrDeleteFieldState(id, field, _extends({}, processedProps, {\n            value: editingState[id][field].value,\n            isProcessingProps: false\n          }));\n        }\n      });\n    });\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(_ref => {\n        let [thisField, fieldProps] = _ref;\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(_ref2 => {\n      let [field, fieldProps] = _ref2;\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      var _rowModesModel$id, _copyOfPrevRowModesMo, _idToIdLookup$id;\n      const params = (_rowModesModel$id = rowModesModel[id]) !== null && _rowModesModel$id !== void 0 ? _rowModesModel$id : {\n        mode: GridRowModes.View\n      };\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) === null || _copyOfPrevRowModesMo === void 0 ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) !== null && _idToIdLookup$id !== void 0 ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","unstable_useEnhancedEffect","useEnhancedEffect","warnOnce","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","isPasteShortcut","gridColumnFieldsSelector","gridVisibleColumnFieldsSelector","gridRowsDataRowIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","GRID_ACTIONS_COLUMN_TYPE","getDefaultCellValue","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","undefined","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","editMode","Row","arguments","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","concat","throwIfNotInMode","mode","getRowMode","hasFieldsWithErrors","rowId","editingState","state","Object","values","some","fieldProps","error","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","column","getColumn","type","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","deleteValue","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","initialValue","reduce","acc","newValue","getCellValue","value","isProcessingProps","preProcessEditCellProps","forEach","Promise","resolve","row","hasChanged","then","processedProps","updateStateToStopRowEditMode","focusedField","finishRowEditMode","moveFocusToRelativeCell","isSomeFieldProcessingProps","rowUpdate","getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","process","env","NODE_ENV","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","promises","_editingState$id","otherFieldsProps","map","promise","push","entries","_ref","thisField","fieldColumn","_editingState$id2","all","_ref2","valueSetter","editingApi","editingPrivateApi","idToIdLookup","copyOfPrevRowModesModel","ids","Set","Array","from","_rowModesModel$id","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridEditModes, GridRowModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridRowsDataRowIdToIdLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from \"../../../models/params/gridRowParams.js\";\nimport { GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(undefined);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI X: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const hasFieldsWithErrors = React.useCallback(rowId => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return Object.values(editingState[rowId]).some(fieldProps => fieldProps.error);\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      if (nextFocusedCell.current?.id !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        if (hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef, hasFieldsWithErrors]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        if (reason !== GridRowEditStopReasons.escapeKeyDown && hasFieldsWithErrors(params.id)) {\n          return;\n        }\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef, hasFieldsWithErrors]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      const column = apiRef.current.getColumn(field);\n      let newValue = apiRef.current.getCellValue(id, field);\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        if (deleteValue) {\n          newValue = getDefaultCellValue(column);\n        } else if (initialValue) {\n          newValue = initialValue;\n        }\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: !!column.preProcessEditCellProps && deleteValue\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n    columnFields.filter(field => !!apiRef.current.getColumn(field).preProcessEditCellProps && deleteValue).forEach(field => {\n      const column = apiRef.current.getColumn(field);\n      const value = apiRef.current.getCellValue(id, field);\n      const newValue = deleteValue ? getDefaultCellValue(column) : initialValue ?? value;\n      Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps[field],\n        hasChanged: newValue !== value\n      })).then(processedProps => {\n        // Check if still in edit mode before updating\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          const editingState = gridEditRowsStateSelector(apiRef.current.state);\n          updateOrDeleteFieldState(id, field, _extends({}, processedProps, {\n            value: editingState[id][field].value,\n            isProcessingProps: false\n          }));\n        }\n      });\n    });\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    if (hasFieldsWithErrors(id)) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter(fieldProps.value, rowUpdate, column, apiRef);\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    const ids = new Set([...Object.keys(rowModesModel), ...Object.keys(copyOfPrevRowModesModel)]);\n    Array.from(ids).forEach(id => {\n      const params = rowModesModel[id] ?? {\n        mode: GridRowModes.View\n      };\n      const prevMode = copyOfPrevRowModesModel[id]?.mode || GridRowModes.View;\n      const originalId = idToIdLookup[id] ?? id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}