{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnsTotalWidthSelector, gridVisiblePinnedColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridDimensionsSelector } from \"./gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { gridRenderContextSelector } from \"../virtualization/index.js\";\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { calculatePinnedRowsHeight, getValidRowHeight, rowHeightWarning } from \"../rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../columns/gridColumnsUtils.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../../constants/dataGridPropsDefaultValues.js\";\nimport { isJSDOM } from \"../../../utils/isJSDOM.js\";\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  groupHeaderHeight: 0,\n  headerFilterHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = state => {\n  const dimensions = EMPTY_DIMENSIONS;\n  return _extends({}, state, {\n    dimensions\n  });\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const dimensionsState = useGridSelector(apiRef, gridDimensionsSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const validRowHeight = React.useMemo(() => getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning), [props.rowHeight]);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const headerHeight = Math.floor(props.columnHeaderHeight * densityFactor);\n  const groupHeaderHeight = Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * densityFactor);\n  const headerFilterHeight = Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor);\n  const columnsTotalWidth = roundToDecimalPlaces(gridColumnsTotalWidthSelector(apiRef), 6);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, props);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => throttle(setSavedSize, props.resizeThrottleMs), [props.resizeThrottleMs]);\n  React.useEffect(() => debouncedSetSavedSize.clear, [debouncedSetSavedSize]);\n  const previousSize = React.useRef(undefined);\n  const getRootDimensions = () => apiRef.current.state.dimensions;\n  const setDimensions = useEventCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n  });\n  const resize = React.useCallback(() => {\n    const element = apiRef.current.mainElementRef.current;\n    if (!element) {\n      return;\n    }\n    const computedStyle = ownerWindow(element).getComputedStyle(element);\n    const newSize = {\n      width: parseFloat(computedStyle.width) || 0,\n      height: parseFloat(computedStyle.height) || 0\n    };\n    if (!previousSize.current || !areElementSizesEqual(previousSize.current, newSize)) {\n      apiRef.current.publishEvent('resize', newSize);\n      previousSize.current = newSize;\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef.current.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    const rootElement = apiRef.current.rootElementRef.current;\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const scrollbarSize = measureScrollbarSize(rootElement, columnsTotalWidth, props.scrollbarSize);\n    const topContainerHeight = headersTotalHeight + pinnedRowsHeight.top;\n    const bottomContainerHeight = pinnedRowsHeight.bottom;\n    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;\n    const contentSize = {\n      width: nonPinnedColumnsTotalWidth,\n      height: rowsMeta.currentPageTotalHeight\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      groupHeaderHeight,\n      headerFilterHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    setDimensions(newDimensions);\n    if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, rowHeight, headerHeight, groupHeaderHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const apiPublic = {\n    resize,\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateDimensions();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateDimensions]);\n  const root = apiRef.current.rootElementRef.current;\n  useEnhancedEffect(() => {\n    if (!root) {\n      return;\n    }\n    const set = (k, v) => root.style.setProperty(k, v);\n    set('--DataGrid-width', `${dimensionsState.viewportOuterSize.width}px`);\n    set('--DataGrid-hasScrollX', `${Number(dimensionsState.hasScrollX)}`);\n    set('--DataGrid-hasScrollY', `${Number(dimensionsState.hasScrollY)}`);\n    set('--DataGrid-scrollbarSize', `${dimensionsState.scrollbarSize}px`);\n    set('--DataGrid-rowWidth', `${dimensionsState.rowWidth}px`);\n    set('--DataGrid-columnsTotalWidth', `${dimensionsState.columnsTotalWidth}px`);\n    set('--DataGrid-leftPinnedWidth', `${dimensionsState.leftPinnedWidth}px`);\n    set('--DataGrid-rightPinnedWidth', `${dimensionsState.rightPinnedWidth}px`);\n    set('--DataGrid-headerHeight', `${dimensionsState.headerHeight}px`);\n    set('--DataGrid-headersTotalHeight', `${dimensionsState.headersTotalHeight}px`);\n    set('--DataGrid-topContainerHeight', `${dimensionsState.topContainerHeight}px`);\n    set('--DataGrid-bottomContainerHeight', `${dimensionsState.bottomContainerHeight}px`);\n    set('--height', `${dimensionsState.rowHeight}px`);\n  }, [root, dimensionsState]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateDimensions);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}\nfunction measureScrollbarSize(rootElement, columnsTotalWidth, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (rootElement === null || columnsTotalWidth === 0) {\n    return 0;\n  }\n  const doc = ownerDocument(rootElement);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  rootElement.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  rootElement.removeChild(scrollDiv);\n  return size;\n}\n\n// Get rid of floating point imprecision errors\n// https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\nfunction roundToDecimalPlaces(value, decimals) {\n  return Math.round(value * 10 ** decimals) / 10 ** decimals;\n}\nfunction areElementSizesEqual(a, b) {\n  return a.width === b.width && a.height === b.height;\n}","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","unstable_ownerWindow","ownerWindow","throttle","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridVisiblePinnedColumnDefinitionsSelector","gridDimensionsSelector","gridDensityFactorSelector","gridRenderContextSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","calculatePinnedRowsHeight","getValidRowHeight","rowHeightWarning","getTotalHeaderHeight","DATA_GRID_PROPS_DEFAULT_VALUES","isJSDOM","EMPTY_SIZE","width","height","EMPTY_DIMENSIONS","isReady","root","viewportOuterSize","viewportInnerSize","contentSize","minimumSize","hasScrollX","hasScrollY","scrollbarSize","headerHeight","groupHeaderHeight","headerFilterHeight","rowWidth","rowHeight","columnsTotalWidth","leftPinnedWidth","rightPinnedWidth","headersTotalHeight","topContainerHeight","bottomContainerHeight","dimensionsStateInitializer","state","dimensions","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","dimensionsState","rowsMeta","pinnedColumns","densityFactor","validRowHeight","useMemo","Math","floor","columnHeaderHeight","columnGroupHeaderHeight","roundToDecimalPlaces","left","reduce","w","col","computedWidth","right","savedSize","setSavedSize","useState","debouncedSetSavedSize","resizeThrottleMs","useEffect","clear","previousSize","undefined","getRootDimensions","current","setDimensions","setState","resize","useCallback","element","mainElementRef","computedStyle","getComputedStyle","newSize","parseFloat","areElementSizesEqual","publishEvent","getViewportPageSize","currentPage","pagination","paginationMode","getRowHeight","renderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","updateDimensions","rootElement","rootElementRef","pinnedRowsHeight","measureScrollbarSize","top","bottom","nonPinnedColumnsTotalWidth","currentPageTotalHeight","autoHeight","round","max","content","container","hasScrollXIfNoYScrollBar","hasScrollYIfNoXScrollBar","newDimensions","prevDimensions","updateRenderContext","apiPublic","apiPrivate","set","k","v","style","setProperty","Number","isFirstSizing","handleResize","size","error","join","onResize","doc","scrollDiv","createElement","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","value","decimals","a","b"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { throttle } from '@mui/x-internals/throttle';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnsTotalWidthSelector, gridVisiblePinnedColumnDefinitionsSelector } from \"../columns/index.js\";\nimport { gridDimensionsSelector } from \"./gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { gridRenderContextSelector } from \"../virtualization/index.js\";\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridRowsMetaSelector } from \"../rows/gridRowsMetaSelector.js\";\nimport { calculatePinnedRowsHeight, getValidRowHeight, rowHeightWarning } from \"../rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../columns/gridColumnsUtils.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../../constants/dataGridPropsDefaultValues.js\";\nimport { isJSDOM } from \"../../../utils/isJSDOM.js\";\nconst EMPTY_SIZE = {\n  width: 0,\n  height: 0\n};\nconst EMPTY_DIMENSIONS = {\n  isReady: false,\n  root: EMPTY_SIZE,\n  viewportOuterSize: EMPTY_SIZE,\n  viewportInnerSize: EMPTY_SIZE,\n  contentSize: EMPTY_SIZE,\n  minimumSize: EMPTY_SIZE,\n  hasScrollX: false,\n  hasScrollY: false,\n  scrollbarSize: 0,\n  headerHeight: 0,\n  groupHeaderHeight: 0,\n  headerFilterHeight: 0,\n  rowWidth: 0,\n  rowHeight: 0,\n  columnsTotalWidth: 0,\n  leftPinnedWidth: 0,\n  rightPinnedWidth: 0,\n  headersTotalHeight: 0,\n  topContainerHeight: 0,\n  bottomContainerHeight: 0\n};\nexport const dimensionsStateInitializer = state => {\n  const dimensions = EMPTY_DIMENSIONS;\n  return _extends({}, state, {\n    dimensions\n  });\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(EMPTY_SIZE);\n  const dimensionsState = useGridSelector(apiRef, gridDimensionsSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const validRowHeight = React.useMemo(() => getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning), [props.rowHeight]);\n  const rowHeight = Math.floor(validRowHeight * densityFactor);\n  const headerHeight = Math.floor(props.columnHeaderHeight * densityFactor);\n  const groupHeaderHeight = Math.floor((props.columnGroupHeaderHeight ?? props.columnHeaderHeight) * densityFactor);\n  const headerFilterHeight = Math.floor((props.headerFilterHeight ?? props.columnHeaderHeight) * densityFactor);\n  const columnsTotalWidth = roundToDecimalPlaces(gridColumnsTotalWidthSelector(apiRef), 6);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, props);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => throttle(setSavedSize, props.resizeThrottleMs), [props.resizeThrottleMs]);\n  React.useEffect(() => debouncedSetSavedSize.clear, [debouncedSetSavedSize]);\n  const previousSize = React.useRef(undefined);\n  const getRootDimensions = () => apiRef.current.state.dimensions;\n  const setDimensions = useEventCallback(dimensions => {\n    apiRef.current.setState(state => _extends({}, state, {\n      dimensions\n    }));\n  });\n  const resize = React.useCallback(() => {\n    const element = apiRef.current.mainElementRef.current;\n    if (!element) {\n      return;\n    }\n    const computedStyle = ownerWindow(element).getComputedStyle(element);\n    const newSize = {\n      width: parseFloat(computedStyle.width) || 0,\n      height: parseFloat(computedStyle.height) || 0\n    };\n    if (!previousSize.current || !areElementSizesEqual(previousSize.current, newSize)) {\n      apiRef.current.publishEvent('resize', newSize);\n      previousSize.current = newSize;\n    }\n  }, [apiRef]);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = gridDimensionsSelector(apiRef.current.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = gridRenderContextSelector(apiRef);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const updateDimensions = React.useCallback(() => {\n    const rootElement = apiRef.current.rootElementRef.current;\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const scrollbarSize = measureScrollbarSize(rootElement, columnsTotalWidth, props.scrollbarSize);\n    const topContainerHeight = headersTotalHeight + pinnedRowsHeight.top;\n    const bottomContainerHeight = pinnedRowsHeight.bottom;\n    const nonPinnedColumnsTotalWidth = columnsTotalWidth - leftPinnedWidth - rightPinnedWidth;\n    const contentSize = {\n      width: nonPinnedColumnsTotalWidth,\n      height: rowsMeta.currentPageTotalHeight\n    };\n    let viewportOuterSize;\n    let viewportInnerSize;\n    let hasScrollX = false;\n    let hasScrollY = false;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: topContainerHeight + bottomContainerHeight + contentSize.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - (hasScrollY ? scrollbarSize : 0)),\n        height: Math.max(0, viewportOuterSize.height - (hasScrollX ? scrollbarSize : 0))\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height\n      };\n      viewportInnerSize = {\n        width: Math.max(0, viewportOuterSize.width - leftPinnedWidth - rightPinnedWidth),\n        height: Math.max(0, viewportOuterSize.height - topContainerHeight - bottomContainerHeight)\n      };\n      const content = contentSize;\n      const container = viewportInnerSize;\n      const hasScrollXIfNoYScrollBar = content.width > container.width;\n      const hasScrollYIfNoXScrollBar = content.height > container.height;\n      if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n        hasScrollY = hasScrollYIfNoXScrollBar;\n        hasScrollX = content.width + (hasScrollY ? scrollbarSize : 0) > container.width;\n\n        // We recalculate the scroll y to consider the size of the x scrollbar.\n        if (hasScrollX) {\n          hasScrollY = content.height + scrollbarSize > container.height;\n        }\n      }\n      if (hasScrollY) {\n        viewportInnerSize.width -= scrollbarSize;\n      }\n      if (hasScrollX) {\n        viewportInnerSize.height -= scrollbarSize;\n      }\n    }\n    const rowWidth = Math.max(viewportOuterSize.width, columnsTotalWidth + (hasScrollY ? scrollbarSize : 0));\n    const minimumSize = {\n      width: columnsTotalWidth,\n      height: topContainerHeight + contentSize.height + bottomContainerHeight\n    };\n    const newDimensions = {\n      isReady: true,\n      root: rootDimensionsRef.current,\n      viewportOuterSize,\n      viewportInnerSize,\n      contentSize,\n      minimumSize,\n      hasScrollX,\n      hasScrollY,\n      scrollbarSize,\n      headerHeight,\n      groupHeaderHeight,\n      headerFilterHeight,\n      rowWidth,\n      rowHeight,\n      columnsTotalWidth,\n      leftPinnedWidth,\n      rightPinnedWidth,\n      headersTotalHeight,\n      topContainerHeight,\n      bottomContainerHeight\n    };\n    const prevDimensions = apiRef.current.state.dimensions;\n    setDimensions(newDimensions);\n    if (!areElementSizesEqual(newDimensions.viewportInnerSize, prevDimensions.viewportInnerSize)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newDimensions.viewportInnerSize);\n    }\n    apiRef.current.updateRenderContext?.();\n  }, [apiRef, setDimensions, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, rowHeight, headerHeight, groupHeaderHeight, headerFilterHeight, columnsTotalWidth, headersTotalHeight, leftPinnedWidth, rightPinnedWidth]);\n  const apiPublic = {\n    resize,\n    getRootDimensions\n  };\n  const apiPrivate = {\n    updateDimensions,\n    getViewportPageSize\n  };\n  useGridApiMethod(apiRef, apiPublic, 'public');\n  useGridApiMethod(apiRef, apiPrivate, 'private');\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateDimensions();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateDimensions]);\n  const root = apiRef.current.rootElementRef.current;\n  useEnhancedEffect(() => {\n    if (!root) {\n      return;\n    }\n    const set = (k, v) => root.style.setProperty(k, v);\n    set('--DataGrid-width', `${dimensionsState.viewportOuterSize.width}px`);\n    set('--DataGrid-hasScrollX', `${Number(dimensionsState.hasScrollX)}`);\n    set('--DataGrid-hasScrollY', `${Number(dimensionsState.hasScrollY)}`);\n    set('--DataGrid-scrollbarSize', `${dimensionsState.scrollbarSize}px`);\n    set('--DataGrid-rowWidth', `${dimensionsState.rowWidth}px`);\n    set('--DataGrid-columnsTotalWidth', `${dimensionsState.columnsTotalWidth}px`);\n    set('--DataGrid-leftPinnedWidth', `${dimensionsState.leftPinnedWidth}px`);\n    set('--DataGrid-rightPinnedWidth', `${dimensionsState.rightPinnedWidth}px`);\n    set('--DataGrid-headerHeight', `${dimensionsState.headerHeight}px`);\n    set('--DataGrid-headersTotalHeight', `${dimensionsState.headersTotalHeight}px`);\n    set('--DataGrid-topContainerHeight', `${dimensionsState.topContainerHeight}px`);\n    set('--DataGrid-bottomContainerHeight', `${dimensionsState.bottomContainerHeight}px`);\n    set('--height', `${dimensionsState.rowHeight}px`);\n  }, [root, dimensionsState]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the Data Grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(updateDimensions, [updateDimensions]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateDimensions);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateDimensions);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}\nfunction measureScrollbarSize(rootElement, columnsTotalWidth, scrollbarSize) {\n  if (scrollbarSize !== undefined) {\n    return scrollbarSize;\n  }\n  if (rootElement === null || columnsTotalWidth === 0) {\n    return 0;\n  }\n  const doc = ownerDocument(rootElement);\n  const scrollDiv = doc.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.overflow = 'scroll';\n  scrollDiv.className = 'scrollDiv';\n  rootElement.appendChild(scrollDiv);\n  const size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  rootElement.removeChild(scrollDiv);\n  return size;\n}\n\n// Get rid of floating point imprecision errors\n// https://github.com/mui/mui-x/issues/9550#issuecomment-1619020477\nfunction roundToDecimalPlaces(value, decimals) {\n  return Math.round(value * 10 ** decimals) / 10 ** decimals;\n}\nfunction areElementSizesEqual(a, b) {\n  return a.width === b.width && a.height === b.height;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}