{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventcallback } from '@mui/utils';\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { gridFocusCellSelector, gridFocusColumnGroupHeaderSelector } from \"./gridFocusStateSelector.js\";\nimport { gridVisibleColumnDefinitionsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { clamp } from \"../../../utils/utils.js\";\nimport { gridPinnedRowsSelector } from \"../rows/gridRowsSelector.js\";\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const hasRootReference = apiRef.current.rootElementRef.current !== null;\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell === null || focusedCell === void 0 ? void 0 : focusedCell.id) === id && (focusedCell === null || focusedCell === void 0 ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(\"Focusing on cell with id=\".concat(id, \" and field=\").concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(\"Focusing on column header with colIndex=\".concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFilterFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(\"Focusing on column header filter with colIndex=\".concat(field));\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback(function (field, depth) {\n    let event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const pinnedRows = gridPinnedRowsSelector(apiRef);\n\n    // Include pinned rows as well\n    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);\n    let rowIndexToFocus = currentPageRows.findIndex(row => row.id === id);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPageRows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);\n    const rowToFocus = currentPageRows[rowIndexToFocus];\n    if (!rowToFocus) {\n      return;\n    }\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(_ref => {\n    let {\n      id,\n      field\n    } = _ref;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback((_ref2, event) => {\n    let {\n      field\n    } = _ref2;\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleColumnGroupHeaderFocus = React.useCallback((_ref3, event) => {\n    let {\n      fields,\n      depth\n    } = _ref3;\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback((_, event) => {\n    var _event$relatedTarget;\n    if ((_event$relatedTarget = event.relatedTarget) !== null && _event$relatedTarget !== void 0 && (_event$relatedTarget = _event$relatedTarget.getAttribute('class')) !== null && _event$relatedTarget !== void 0 && _event$relatedTarget.includes(gridClasses.columnHeader)) {\n      return;\n    }\n    logger.debug(\"Clearing focus\");\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnHeaderFilter: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams === null || cellParams === void 0 ? void 0 : cellParams.id) === focusedCell.id && (cellParams === null || cellParams === void 0 ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement !== null && cellElement !== void 0 && cellElement.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell === null || cell === void 0 ? void 0 : cell.id) !== params.id || (cell === null || cell === void 0 ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore,\n    // focus previous row or remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      var _gridFocusCellSelecto;\n      const lastFocusedRowId = (_gridFocusCellSelecto = gridFocusCellSelector(apiRef)) === null || _gridFocusCellSelecto === void 0 ? void 0 : _gridFocusCellSelecto.id;\n      let nextRowId = null;\n      if (typeof lastFocusedRowId !== 'undefined') {\n        var _nextRow$id;\n        const lastFocusedRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(lastFocusedRowId);\n        const currentPage = getVisibleRows(apiRef, {\n          pagination: props.pagination,\n          paginationMode: props.paginationMode\n        });\n        const nextRow = currentPage.rows[clamp(lastFocusedRowIndex, 0, currentPage.rows.length - 1)];\n        nextRowId = (_nextRow$id = nextRow === null || nextRow === void 0 ? void 0 : nextRow.id) !== null && _nextRow$id !== void 0 ? _nextRow$id : null;\n      }\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: nextRowId === null ? null : {\n            id: nextRowId,\n            field: cell.field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handlePaginationModelChange = useEventcallback(() => {\n    const currentFocusedCell = gridFocusCellSelector(apiRef);\n    if (!currentFocusedCell) {\n      return;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const rowIsInCurrentPage = currentPage.rows.find(row => row.id === currentFocusedCell.id);\n    if (rowIsInCurrentPage) {\n      return;\n    }\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: currentPage.rows[0].id,\n            field: visibleColumns[0].field\n          },\n          columnGroupHeader: null,\n          columnHeader: null,\n          columnHeaderFilter: null\n        }\n      });\n    });\n  });\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus,\n    setColumnHeaderFilterFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, hasRootReference, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","unstable_useEventCallback","useEventcallback","gridClasses","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridFocusColumnGroupHeaderSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","gridPinnedRowsSelector","focusStateInitializer","state","focus","cell","columnHeader","columnHeaderFilter","columnGroupHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","hasRootReference","current","rootElementRef","publishCellFocusOut","useCallback","event","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","concat","forceUpdate","setColumnHeaderFocus","arguments","length","undefined","setColumnHeaderFilterFocus","setColumnGroupHeaderFocus","depth","getColumnGroupHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","visibleColumns","currentPage","pagination","paginationMode","pinnedRows","currentPageRows","top","rows","bottom","rowIndexToFocus","findIndex","row","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","_ref","handleCellKeyDown","params","key","handleColumnHeaderFocus","_ref2","target","currentTarget","handleColumnGroupHeaderFocus","_ref3","fields","focusedColumnGroup","includes","handleBlur","_","_event$relatedTarget","relatedTarget","getAttribute","handleCellMouseDown","handleDocumentClick","cellParams","canUpdateFocus","unstable_applyPipeProcessors","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","_gridFocusCellSelecto","lastFocusedRowId","nextRowId","_nextRow$id","lastFocusedRowIndex","getRowIndexRelativeToVisibleRows","nextRow","handlePaginationModelChange","currentFocusedCell","rowIsInCurrentPage","find","focusApi","focusPrivateApi","useEffect","doc","addEventListener","removeEventListener"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventcallback } from '@mui/utils';\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridApiEventHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { gridFocusCellSelector, gridFocusColumnGroupHeaderSelector } from \"./gridFocusStateSelector.js\";\nimport { gridVisibleColumnDefinitionsSelector } from \"../columns/gridColumnsSelector.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { clamp } from \"../../../utils/utils.js\";\nimport { gridPinnedRowsSelector } from \"../rows/gridRowsSelector.js\";\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnHeaderFilter: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const hasRootReference = apiRef.current.rootElementRef.current !== null;\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (focusedCell?.id === id && focusedCell?.field === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          columnHeaderFilter: null,\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFilterFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header filter with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: null,\n          columnHeaderFilter: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback((field, depth, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const pinnedRows = gridPinnedRowsSelector(apiRef);\n\n    // Include pinned rows as well\n    const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);\n    let rowIndexToFocus = currentPageRows.findIndex(row => row.id === id);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPageRows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPageRows.length - 1);\n    const rowToFocus = currentPageRows[rowIndexToFocus];\n    if (!rowToFocus) {\n      return;\n    }\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleColumnGroupHeaderFocus = React.useCallback(({\n    fields,\n    depth\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    const focusedColumnGroup = gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback((_, event) => {\n    if (event.relatedTarget?.getAttribute('class')?.includes(gridClasses.columnHeader)) {\n      return;\n    }\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnHeaderFilter: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if (cellParams?.id === focusedCell.id && cellParams?.field === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement?.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell?.id !== params.id || cell?.field !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore,\n    // focus previous row or remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      const lastFocusedRowId = gridFocusCellSelector(apiRef)?.id;\n      let nextRowId = null;\n      if (typeof lastFocusedRowId !== 'undefined') {\n        const lastFocusedRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(lastFocusedRowId);\n        const currentPage = getVisibleRows(apiRef, {\n          pagination: props.pagination,\n          paginationMode: props.paginationMode\n        });\n        const nextRow = currentPage.rows[clamp(lastFocusedRowIndex, 0, currentPage.rows.length - 1)];\n        nextRowId = nextRow?.id ?? null;\n      }\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: nextRowId === null ? null : {\n            id: nextRowId,\n            field: cell.field\n          },\n          columnHeader: null,\n          columnHeaderFilter: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handlePaginationModelChange = useEventcallback(() => {\n    const currentFocusedCell = gridFocusCellSelector(apiRef);\n    if (!currentFocusedCell) {\n      return;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    const rowIsInCurrentPage = currentPage.rows.find(row => row.id === currentFocusedCell.id);\n    if (rowIsInCurrentPage) {\n      return;\n    }\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id: currentPage.rows[0].id,\n            field: visibleColumns[0].field\n          },\n          columnGroupHeader: null,\n          columnHeader: null,\n          columnHeaderFilter: null\n        }\n      });\n    });\n  });\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus,\n    setColumnHeaderFilterFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, hasRootReference, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n  useGridApiEventHandler(apiRef, 'paginationModelChange', handlePaginationModelChange);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}