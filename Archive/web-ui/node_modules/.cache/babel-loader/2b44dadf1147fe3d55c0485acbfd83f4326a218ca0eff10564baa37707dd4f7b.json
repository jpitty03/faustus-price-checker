{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpitt\\\\VSCode\\\\faustus-price-checker\\\\web-ui\\\\src\\\\components\\\\HeaderBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { AppBar, Toolbar, Typography, Button, CircularProgress } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction HeaderBar() {\n  _s();\n  const [divineOrbPrice, setDivineOrbPrice] = useState(null);\n  const [lastModified, setLastModified] = useState(null);\n  const [isActive, setIsActive] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const fetchStatus = async () => {\n    setLoading(true);\n    try {\n      // Fetch the full JSON data\n      const jsonResponse = await fetch(\"/faustus-price-checker/currencyOverview.json\");\n      const data = await jsonResponse.json();\n\n      // Extract Divine Orb price\n      const divineOrb = data.lines.find(line => line.currencyTypeName === \"Divine Orb\");\n      const price = divineOrb ? divineOrb.chaosEquivalent : \"N/A\";\n\n      // Check if the file is \"active\"\n      const now = new Date();\n      const sixMinutesAgo = new Date(now.getTime() - 6 * 60 * 1000);\n      const isActive = data.created > sixMinutesAgo;\n\n      // Update state\n      setDivineOrbPrice(price);\n      setLastModified(lastModifiedDate);\n      setIsActive(isActive);\n    } catch (error) {\n      console.error(\"Error fetching status:\", error);\n    }\n    setLoading(false);\n  };\n\n  // Poll every 60 seconds\n  useEffect(() => {\n    fetchStatus(); // Fetch immediately on component mount\n\n    const interval = setInterval(fetchStatus, 60000); // Poll every 60 seconds\n    return () => clearInterval(interval); // Clean up on unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    position: \"static\",\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          flexGrow: 1\n        },\n        children: \"Faustus Price Checker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 24,\n        sx: {\n          color: \"white\",\n          mr: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            mr: 2\n          },\n          children: [\"Divine Orb Price: \", divineOrbPrice || \"Loading...\", \" Chaos\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          sx: {\n            mr: 2\n          },\n          children: [\"Status: \", isActive ? \"Active ðŸŸ¢\" : \"Inactive ðŸ”´\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"inherit\",\n        onClick: fetchStatus,\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(HeaderBar, \"XX1zJbSmmQBEYGqU5f7TCTbqBIY=\");\n_c = HeaderBar;\nexport default HeaderBar;\nvar _c;\n$RefreshReg$(_c, \"HeaderBar\");","map":{"version":3,"names":["React","useEffect","useState","AppBar","Toolbar","Typography","Button","CircularProgress","jsxDEV","_jsxDEV","Fragment","_Fragment","HeaderBar","_s","divineOrbPrice","setDivineOrbPrice","lastModified","setLastModified","isActive","setIsActive","loading","setLoading","fetchStatus","jsonResponse","fetch","data","json","divineOrb","lines","find","line","currencyTypeName","price","chaosEquivalent","now","Date","sixMinutesAgo","getTime","created","lastModifiedDate","error","console","interval","setInterval","clearInterval","position","children","variant","sx","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","size","color","mr","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/HeaderBar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { AppBar, Toolbar, Typography, Button, CircularProgress } from \"@mui/material\";\r\n\r\nfunction HeaderBar() {\r\n  const [divineOrbPrice, setDivineOrbPrice] = useState(null);\r\n  const [lastModified, setLastModified] = useState(null);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchStatus = async () => {\r\n    setLoading(true);\r\n    try {\r\n\r\n      // Fetch the full JSON data\r\n      const jsonResponse = await fetch(\"/faustus-price-checker/currencyOverview.json\");\r\n      const data = await jsonResponse.json();\r\n\r\n      // Extract Divine Orb price\r\n      const divineOrb = data.lines.find(\r\n        (line) => line.currencyTypeName === \"Divine Orb\"\r\n      );\r\n      const price = divineOrb ? divineOrb.chaosEquivalent : \"N/A\";\r\n\r\n      // Check if the file is \"active\"\r\n      const now = new Date();\r\n      const sixMinutesAgo = new Date(now.getTime() - 6 * 60 * 1000);\r\n      const isActive = data.created > sixMinutesAgo;\r\n\r\n      // Update state\r\n      setDivineOrbPrice(price);\r\n      setLastModified(lastModifiedDate);\r\n      setIsActive(isActive);\r\n    } catch (error) {\r\n      console.error(\"Error fetching status:\", error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Poll every 60 seconds\r\n  useEffect(() => {\r\n    fetchStatus(); // Fetch immediately on component mount\r\n\r\n    const interval = setInterval(fetchStatus, 60000); // Poll every 60 seconds\r\n    return () => clearInterval(interval); // Clean up on unmount\r\n  }, []);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" sx={{ flexGrow: 1 }}>\r\n          Faustus Price Checker\r\n        </Typography>\r\n        {loading ? (\r\n          <CircularProgress size={24} sx={{ color: \"white\", mr: 2 }} />\r\n        ) : (\r\n          <>\r\n            <Typography variant=\"body1\" sx={{ mr: 2 }}>\r\n              Divine Orb Price: {divineOrbPrice || \"Loading...\"} Chaos\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ mr: 2 }}>\r\n              Status: {isActive ? \"Active ðŸŸ¢\" : \"Inactive ðŸ”´\"}\r\n            </Typography>\r\n          </>\r\n        )}\r\n        <Button color=\"inherit\" onClick={fetchStatus}>\r\n          Refresh\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default HeaderBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}