{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jpitt\\\\VSCode\\\\faustus-price-checker\\\\web-ui\\\\src\\\\components\\\\PriceDataGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\n/**\r\n * Flatten logic for prices.json, which looks like:\r\n * {\r\n *   \"updated\": \"2025-01-26T02:42:40.406188Z\",\r\n *   \"exchanges\": [\r\n *       {\r\n *         \"haveCurrency\": \"...\",\r\n *         \"wantCurrency\": \"...\",\r\n *         \"lastUpdated\": \"...\",\r\n *         \"offers\": [...],\r\n *         \"competingTrades\": [...]\r\n *       },\r\n *       ...\r\n *   ]\r\n * }\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction flattenExchanges(pricesJson) {\n  console.log(\"Flattening exchanges:\", pricesJson);\n  let rowId = 1;\n  const rows = [];\n  pricesJson.exchanges.forEach(exchange => {\n    const {\n      haveCurrency,\n      wantCurrency,\n      lastUpdated,\n      offers,\n      competingTrades\n    } = exchange;\n\n    // If there's at least one offer, push the first\n    if (offers && offers.length > 0) {\n      const firstOffer = offers[0];\n      rows.push({\n        id: rowId++,\n        rowType: \"offer\",\n        haveCurrency,\n        wantCurrency,\n        lastUpdated,\n        haveAmount: firstOffer.haveAmount,\n        wantAmount: firstOffer.wantAmount,\n        stock: firstOffer.stock\n      });\n    }\n\n    // If there's at least one competing, push the first\n    if (competingTrades && competingTrades.length > 0) {\n      const firstCompeting = competingTrades[0];\n      rows.push({\n        id: rowId++,\n        rowType: \"competing\",\n        haveCurrency,\n        wantCurrency,\n        lastUpdated,\n        haveAmount: firstCompeting.haveAmount,\n        wantAmount: firstCompeting.wantAmount,\n        stock: firstCompeting.stock\n      });\n    }\n  });\n  return rows;\n}\nexport default function PriceDataGrid() {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 1) First fetch: currencyOverview.json (for icon data)\n    fetch(\"/currencyOverview.json\").then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to fetch currencyOverview.json: ${res.status}`);\n      }\n      return res.json();\n    }).then(ninjaData => {\n      console.log(\"Fetched Ninja Data:\", ninjaData);\n\n      // Build the icon map\n      const map = {};\n      if (ninjaData.currencyDetails) {\n        ninjaData.currencyDetails.forEach(c => {\n          map[c.name] = c.icon;\n        });\n      }\n      setCurrencyIconMap(map);\n\n      // 2) Second fetch: prices.json (for local exchange data)\n      return fetch(\"/faustusPrices.json\");\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to fetch prices.json: ${res.status}`);\n      }\n      return res.json();\n    }).then(pricesData => {\n      console.log(\"Fetched Prices Data:\", pricesData);\n\n      // Flatten the \"exchanges\" into rows\n      const flattenedRows = flattenExchanges(pricesData);\n      setRows(flattenedRows);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Error fetching data:\", err);\n      setLoading(false);\n    });\n  }, []);\n\n  // Define columns for the DataGrid\n  const columns = [{\n    field: \"haveCurrency\",\n    headerName: \"Have Currency\",\n    width: 200,\n    renderCell: params => {\n      const currencyName = params.value;\n      const iconUrl = currencyIconMap[currencyName];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        children: [iconUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconUrl,\n          alt: currencyName,\n          style: {\n            width: 24,\n            height: 24,\n            marginRight: 8\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this), currencyName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this);\n    }\n  }, {\n    field: \"wantCurrency\",\n    headerName: \"Want Currency\",\n    width: 130\n  }, {\n    field: \"lastUpdated\",\n    headerName: \"Last Updated\",\n    width: 180\n  }, {\n    field: \"rowType\",\n    headerName: \"Type\",\n    width: 100\n  }, {\n    field: \"haveAmount\",\n    headerName: \"Have Amt\",\n    type: \"number\",\n    width: 100\n  }, {\n    field: \"wantAmount\",\n    headerName: \"Want Amt\",\n    type: \"number\",\n    width: 100\n  }, {\n    field: \"stock\",\n    headerName: \"Stock\",\n    type: \"number\",\n    width: 100\n  }];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 800,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 10,\n      rowsPerPageOptions: [5, 10, 25]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(PriceDataGrid, \"zvqA+PDE3ZqKN4nXsPjSqjFJM+s=\");\n_c = PriceDataGrid;\nvar _c;\n$RefreshReg$(_c, \"PriceDataGrid\");","map":{"version":3,"names":["React","useEffect","useState","DataGrid","jsxDEV","_jsxDEV","flattenExchanges","pricesJson","console","log","rowId","rows","exchanges","forEach","exchange","haveCurrency","wantCurrency","lastUpdated","offers","competingTrades","length","firstOffer","push","id","rowType","haveAmount","wantAmount","stock","firstCompeting","PriceDataGrid","_s","setRows","currencyIconMap","setCurrencyIconMap","loading","setLoading","fetch","then","res","ok","Error","status","json","ninjaData","map","currencyDetails","c","name","icon","pricesData","flattenedRows","catch","err","error","columns","field","headerName","width","renderCell","params","currencyName","value","iconUrl","style","display","alignItems","children","src","alt","height","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","type","pageSize","rowsPerPageOptions","_c","$RefreshReg$"],"sources":["C:/Users/jpitt/VSCode/faustus-price-checker/web-ui/src/components/PriceDataGrid.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\n/**\r\n * Flatten logic for prices.json, which looks like:\r\n * {\r\n *   \"updated\": \"2025-01-26T02:42:40.406188Z\",\r\n *   \"exchanges\": [\r\n *       {\r\n *         \"haveCurrency\": \"...\",\r\n *         \"wantCurrency\": \"...\",\r\n *         \"lastUpdated\": \"...\",\r\n *         \"offers\": [...],\r\n *         \"competingTrades\": [...]\r\n *       },\r\n *       ...\r\n *   ]\r\n * }\r\n */\r\nfunction flattenExchanges(pricesJson) {\r\n  console.log(\"Flattening exchanges:\", pricesJson);\r\n  let rowId = 1;\r\n  const rows = [];\r\n\r\n  pricesJson.exchanges.forEach((exchange) => {\r\n    const { haveCurrency, wantCurrency, lastUpdated, offers, competingTrades } = exchange;\r\n\r\n    // If there's at least one offer, push the first\r\n    if (offers && offers.length > 0) {\r\n      const firstOffer = offers[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"offer\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstOffer.haveAmount,\r\n        wantAmount: firstOffer.wantAmount,\r\n        stock: firstOffer.stock\r\n      });\r\n    }\r\n\r\n    // If there's at least one competing, push the first\r\n    if (competingTrades && competingTrades.length > 0) {\r\n      const firstCompeting = competingTrades[0];\r\n      rows.push({\r\n        id: rowId++,\r\n        rowType: \"competing\",\r\n        haveCurrency,\r\n        wantCurrency,\r\n        lastUpdated,\r\n        haveAmount: firstCompeting.haveAmount,\r\n        wantAmount: firstCompeting.wantAmount,\r\n        stock: firstCompeting.stock\r\n      });\r\n    }\r\n  });\r\n\r\n  return rows;\r\n}\r\n\r\nexport default function PriceDataGrid() {\r\n  const [rows, setRows] = useState([]);\r\n  const [currencyIconMap, setCurrencyIconMap] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // 1) First fetch: currencyOverview.json (for icon data)\r\n    fetch(\"/currencyOverview.json\")\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(`Failed to fetch currencyOverview.json: ${res.status}`);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((ninjaData) => {\r\n        console.log(\"Fetched Ninja Data:\", ninjaData);\r\n\r\n        // Build the icon map\r\n        const map = {};\r\n        if (ninjaData.currencyDetails) {\r\n          ninjaData.currencyDetails.forEach((c) => {\r\n            map[c.name] = c.icon;\r\n          });\r\n        }\r\n        setCurrencyIconMap(map);\r\n\r\n        // 2) Second fetch: prices.json (for local exchange data)\r\n        return fetch(\"/faustusPrices.json\");\r\n      })\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(`Failed to fetch prices.json: ${res.status}`);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((pricesData) => {\r\n        console.log(\"Fetched Prices Data:\", pricesData);\r\n\r\n        // Flatten the \"exchanges\" into rows\r\n        const flattenedRows = flattenExchanges(pricesData);\r\n        setRows(flattenedRows);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error fetching data:\", err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  // Define columns for the DataGrid\r\n  const columns = [\r\n    {\r\n      field: \"haveCurrency\",\r\n      headerName: \"Have Currency\",\r\n      width: 200,\r\n      renderCell: (params) => {\r\n        const currencyName = params.value;\r\n        const iconUrl = currencyIconMap[currencyName];\r\n        return (\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            {iconUrl && (\r\n              <img\r\n                src={iconUrl}\r\n                alt={currencyName}\r\n                style={{ width: 24, height: 24, marginRight: 8 }}\r\n              />\r\n            )}\r\n            {currencyName}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    { field: \"wantCurrency\", headerName: \"Want Currency\", width: 130 },\r\n    { field: \"lastUpdated\", headerName: \"Last Updated\", width: 180 },\r\n    { field: \"rowType\", headerName: \"Type\", width: 100 },\r\n    { field: \"haveAmount\", headerName: \"Have Amt\", type: \"number\", width: 100 },\r\n    { field: \"wantAmount\", headerName: \"Want Amt\", type: \"number\", width: 100 },\r\n    { field: \"stock\", headerName: \"Stock\", type: \"number\", width: 100 }\r\n  ];\r\n\r\n  if (loading) {\r\n    return <div>Loading data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: 800, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}